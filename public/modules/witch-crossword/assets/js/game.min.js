var cloud_logos = null;
var cloud_links = null;
var langFont2 = 'px "Mystery Quest"';
var langFont = 'px "Acme"';
var resolution = 2;
var isPrivate = false;
var gamePaused = false;
var auto_camera = false;
var new_level = false;
var str_mat = "";
var str_mat_player = "";
var all_words = [];
var timeLevel = [120, 120, 120, 120, 120, 150, 150, 150, 150, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210];
var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
if (iOS) {
    window.PhaserGlobal = {
        audioContext: createAudioContext(44100)
    };
    function createAudioContext(desiredSampleRate) {
        var AudioCtor = window.AudioContext || window.webkitAudioContext;
        desiredSampleRate = typeof desiredSampleRate === "number" ? desiredSampleRate : 44100;
        var context = new AudioCtor;
        if (/(iPhone|iPad)/i.test(navigator.userAgent) && context.sampleRate !== desiredSampleRate) {
            var buffer = context.createBuffer(1, 1, desiredSampleRate);
            var dummy = context.createBufferSource();
            dummy.buffer = buffer;
            dummy.connect(context.destination);
            dummy.start(0);
            dummy.disconnect();
            context.close();
            context = new AudioCtor
        }
        return context
    }
}
var Music = {
    enableMisic: true,
    music: null
};
var sauvegarde = [];
var matrice = [];
var matrice_player = [];
var str_mat = [];
var str_mat_player = [];
var nbr_hints = 1;
var level;
var nombre_levels = 30;
function Save_setItem(name, value) {
    if (!isPrivate)
        localStorage.setItem(name, value)
}
function Save_getItem(name, pardefaut) {
    if (!isPrivate)
        return localStorage.getItem(name);
    else
        return pardefaut
}
function save_lire(str1) {
    sauvegarde = [];
    var str = str1.split(",");
    var ligne = 0;
    var ii = 0;
    while (ligne < str.length) {
        sauvegarde[ii] = {
            numetoile: 0,
            time: -1,
            nbr_words: 0,
            nbr_found: 0
        };
        sauvegarde[ii].numetoile = +str[ligne++];
        sauvegarde[ii].time = +str[ligne++];
        sauvegarde[ii].nbr_words = +str[ligne++];
        sauvegarde[ii].nbr_found = +str[ligne++];
        ii++
    }
}
function save_ecrit() {
    var str = "";
    for (var i = 0; i < nombre_levels; i++) {
        str += "" + sauvegarde[i].numetoile;
        str += ",";
        str += "" + sauvegarde[i].time;
        str += ",";
        str += "" + sauvegarde[i].nbr_words;
        str += ",";
        str += "" + sauvegarde[i].nbr_found;
        if (i < nombre_levels - 1)
            str += ","
    }
    Save_setItem("WitchCrossward_sauvegarde", str)
}
function save_matrice(mat) {
    for (var ii = 0; ii < 20; ii++) {
        for (var jj = 0; jj < 20; jj++) {
            str_mat += mat[ii][jj];
            str_mat += ",";
            str_mat_player += "*";
            str_mat_player += ","
        }
    }
    Save_setItem("WitchCrossward_mat", str_mat);
    Save_setItem("WitchCrossward_mat_player", str_mat_player)
}
function load_matrice(num_level) {
    matrice = [];
    matrice_player = [];
    for (var i = 0; i < 20; i++) {
        matrice[i] = [];
        matrice_player[i] = [];
        for (var j = 0; j < 20; j++) {
            matrice[i][j] = "";
            matrice_player[i][j] = ""
        }
    }
    var str = str_mat.split(",");
    var str_player = str_mat_player.split(",");
    var ligne = 400 * num_level;
    var ii = 0;
    var jj = 0;
    while (ligne < 400 * num_level + 400) {
        matrice[ii][jj] = str[ligne];
        matrice_player[ii][jj] = str_player[ligne];
        ligne++;
        jj++;
        if (jj >= 20) {
            jj = 0;
            ii++
        }
    }
}
function save_word(letter, level, i, j) {
    var index = 800 * level + (i * 20 + j) * 2;
    str_mat_player = str_mat_player.substring(0, index) + letter + str_mat_player.substring(index + 1, str_mat_player.length);
    Save_setItem("WitchCrossward_mat_player", str_mat_player)
}
function load_words(str1) {
    all_words = [];
    var str = str1.split(",");
    var ligne = 0;
    var ii = 0;
    while (ligne < str.length) {
        all_words[ii] = {
            category: "*",
            question: "*",
            response: "*",
            choices: "*"
        };
        all_words[ii].category = str[ligne++];
        all_words[ii].question = str[ligne++];
        all_words[ii].response = str[ligne++];
        all_words[ii].choices = str[ligne++];
        ii++
    }
}
function save_words(vect_words) {
    var str = "";
    for (var i = 0; i < words.length; i++) {
        str += "" + vect_words[i].category;
        str += ",";
        str += "" + vect_words[i].question;
        str += ",";
        str += "" + vect_words[i].response;
        str += ",";
        str += "" + vect_words[i].choices;
        if (i < words.length - 1)
            str += ","
    }
    Save_setItem("WitchCrossward_words", str)
}
WitchCrossward = {};
WitchCrossward.Boot = function(game) {}
;
WitchCrossward.Boot.prototype = {
    preload: function() {
        this.game.load.image("preloadSprite01", "assets/preloadBar" + resolution + ".png");
        game.load.image("bgPreload", "assets/bgPreload" + resolution + ".png");
        game.load.image("bgMenu", "assets/bgMenu" + resolution + ".png");
        game.load.atlasXML("sprites2", "assets/sprites.png", "assets/sprites.xml")
    },
    create: function() {
        this.input.maxPointers = 1;
        if (this.game.device.desktop) {
            this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.scale.pageAlignHorizontally = true;
            this.scale.pageAlignVertically = true
        } else {
            this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
            this.scale.forceOrientation(false, true, "rotate")
        }
        this.game.scale.enterPortrait.add(this.rescale, this);
        this.game.scale.enterLandscape.add(this.rescale, this);
        this.game.onResume.add(this.rescale, this);
        this.scale.setScreenSize(true);
        if (CloudAPI.logos.active()) {
            cloud_logos = CloudAPI.logos.list()
        }
        this.game.state.start("preload")
    },
    rescale: function() {
        var _game = this.game;
        setTimeout(function() {
            _game.scale.refresh();
            setTimeout(function() {
                _game.scale.refresh()
            }, 400)
        }, 400)
    }
};
text = {
    textCongratulations2: "Congratulations!\nYou finished\nall levels",
    youwin: "LEVEL\nCOMPLETE!",
    txtPause: "GAME PAUSED",
    txtgameover: "You Lose!",
    txtlevel: "Level ",
    txtscore: "Your Score: ",
    txttarget: "Hints: ",
    txttuto1: "Swipe over the\nword to show\nthe question",
    txttuto2: "Finish a level\nas fast as you can\nto get more hints",
    txttuto3: "Find all words\nto get three stars",
    txtunlock: "Congratulations\nNext level unlocked!\n\nFind the two last\nwords to get 3 stars\nor pass to the next level",
    txtHint: "Hints: ",
    txtNoDelete: "No more letters to delete",
    txtgenerate: "Creating Levels For The First Time...\nPlease wait for a moment !",
    txtLoadingLevel: "Loading Level...\nPlease wait for a moment !"
};
words = [{
    category: "Photo",
    question: "0",
    response: "Coffee",
    choices: "mpliyuwn"
}, {
    category: "Vocabulary",
    question: "Opposite of Abnormal",
    response: "Normal",
    choices: "sipedulj"
}, {
    category: "Nature",
    question: "King of the jungle",
    response: "Lion",
    choices: "goyrebwxtm"
}, {
    category: "Life",
    question: "Last meal of the day",
    response: "Dinner",
    choices: "brakfsch"
}, {
    category: "General",
    question: "Artist who painted Mona Lisa",
    response: "DaVinci",
    choices: "jsqnitx"
}, {
    category: "Vocabulary",
    question: "Opposite of Good",
    response: "Bad",
    choices: "unevilrotpc"
}, {
    category: "Famous For",
    question: "Louvre\nMiserables\nZidane\nEiffel Tower",
    response: "France",
    choices: "piagtqum"
}, {
    category: "General",
    question: "European currency",
    response: "Euro",
    choices: "poundstfkb"
}, {
    category: "Vocabulary",
    question: "Needed to travel to a foreign country",
    response: "Passport",
    choices: "lneijt"
}, {
    category: "Life",
    question: "Product used to brush your teeth",
    response: "Toothpaste",
    choices: "dmgw"
}, {
    category: "Life",
    question: "Men wear it in a ceremony",
    response: "Suit",
    choices: "almsjhnrtx"
}, {
    category: "Life",
    question: "Covered by shoes",
    response: "Socks",
    choices: "qpxortsky"
}, {
    category: "Life",
    question: "A person whose occupation is making or altering clothes",
    response: "Tailor",
    choices: "suklajbz"
}, {
    category: "Life",
    question: "The hair growing on the upper lip",
    response: "Moustache",
    choices: "suklj"
}, {
    category: "Life",
    question: "How do we call a father?",
    response: "Dad",
    choices: "dypopamarfx"
}, {
    category: "Life",
    question: "Style of facial hair incorporating hair on a man's chin but not his cheeks",
    response: "Goatee",
    choices: "monkschw"
}, {
    category: "Life",
    question: "First meal of the day",
    response: "Breakfast",
    choices: "lunch"
}, {
    category: "Life",
    question: "A respiratory condition causing difficulty in breathing",
    response: "Asthma",
    choices: "condlugz"
}, {
    category: "Life",
    question: "A boy's name with 3 letters",
    response: "Bob",
    choices: "jnilkatcfwr"
}, {
    category: "Life",
    question: "A girl's name with 3 letters",
    response: "Eva",
    choices: "puolaritxdg"
}, {
    category: "Life",
    question: "A boy's name with 4 letters",
    response: "Mark",
    choices: "vzsjdycfwi"
}, {
    category: "Life",
    question: "A girl's name with 4 letters",
    response: "Mary",
    choices: "jillzwfgeh"
}, {
    category: "Life",
    question: "A boy's name with 5 letters",
    response: "David",
    choices: "qlbruckon"
}, {
    category: "Life",
    question: "A girl's name with 5 letters",
    response: "Wendy",
    choices: "jblkstuio"
}, {
    category: "Life",
    question: "Used for heating food",
    response: "Microwave",
    choices: "furyw"
}, {
    category: "Life",
    question: "Used to cut fruits and vegetables",
    response: "Knife",
    choices: "wztyopuma"
}, {
    category: "Life",
    question: 'The name of the famous fish in the animated movie "Finding Nemo"',
    response: "Nemo",
    choices: "judygillfz"
}, {
    category: "Life",
    question: "Very fine piece of metal used in sewing",
    response: "Needle",
    choices: "morfqubi"
}, {
    category: "Life",
    question: "Playstation rival",
    response: "Xbox",
    choices: "gamcubewii"
}, {
    category: "Life",
    question: "Used for cooking and heating food",
    response: "Oven",
    choices: "blastfirez"
}, {
    category: "Life",
    question: "Part of the human foot",
    response: "Toe",
    choices: "dnailspurxy"
}, {
    category: "Life",
    question: "Part of the human hand",
    response: "finger",
    choices: "nailshjb"
}, {
    category: "Life",
    question: "One of the months of the year",
    response: "December",
    choices: "jankqu"
}, {
    category: "Life",
    question: "One of the months of the year",
    response: "January",
    choices: "novlikr"
}, {
    category: "Life",
    question: "One of the months of the year",
    response: "May",
    choices: "oprlgfwzurh"
}, {
    category: "Life",
    question: "One of the months of the year",
    response: "February",
    choices: "oprlgf"
}, {
    category: "Life",
    question: "One of the days of the week",
    response: "Friday",
    choices: "wensjukv"
}, {
    category: "Life",
    question: "One of the days of the week",
    response: "Monday",
    choices: "thursxiu"
}, {
    category: "Life",
    question: "One of the days of the week",
    response: "Wednesday",
    choices: "tublq"
}, {
    category: "Life",
    question: "Coldest season of the year",
    response: "Winter",
    choices: "blacktuz"
}, {
    category: "Life",
    question: "Warmest season of the year",
    response: "Summer",
    choices: "qpingvwl"
}, {
    category: "Life",
    question: "Absorb liquid and used for washing and cleaning",
    response: "Sponge",
    choices: "almytrkj"
}, {
    category: "Life",
    question: "People wear it before going to sleep",
    response: "Pyjamas",
    choices: "ndleijk"
}, {
    category: "Life",
    question: "Light sandal of plastic or rubber with a thong between the big and second toe",
    response: "FlipFlop",
    choices: "fydrmn"
}, {
    category: "Life",
    question: "Found in a fast food menu",
    response: "Pizza",
    choices: "hmbrgtcos"
}, {
    category: "Life",
    question: "Found in a fast food menu",
    response: "Hamburger",
    choices: "tcosy"
}, {
    category: "Life",
    question: "Found in a fast food menu",
    response: "Hamburger",
    choices: "tcosy"
}, {
    category: "Nature",
    question: "Animal responsible for the most deaths among humans",
    response: "Mosquito",
    choices: "harkln"
}, {
    category: "Nature",
    question: "Tall and green",
    response: "Tree",
    choices: "zsabklmrtv"
}, {
    category: "Nature",
    question: "Fastest land animal",
    response: "Cheetah",
    choices: "gzjlurb"
}, {
    category: "Nature",
    question: "The study of snakes",
    response: "Ophiology",
    choices: "zplfq"
}, {
    category: "Nature",
    question: "Big brother of an alligator",
    response: "Crocodile",
    choices: "brmpj"
}, {
    category: "Nature",
    question: "In some languages a pineapple is also called ___",
    response: "Ananas",
    choices: "hirfvbyu"
}, {
    category: "Nature",
    question: "A bear native to south central China",
    response: "Panda",
    choices: "berkoljhg"
}, {
    category: "Nature",
    question: "A large extinct elephant of the Pleistocene epoch",
    response: "Mammoth",
    choices: "fkdjgue"
}, {
    category: "Nature",
    question: "The obscuration of the light of the sun by the intervention of the moon between it and a point on the earth",
    response: "Eclipse",
    choices: "solarun"
}, {
    category: "Nature",
    question: "Heavy silvery-white metal which is liquid at ordinary temperatures",
    response: "Mercury",
    choices: "stalzkn"
}, {
    category: "Nature",
    question: "A small animal that can last longer than a camel without drinking water",
    response: "Rat",
    choices: "cabgirafemz"
}, {
    category: "Nature",
    question: "Uncontrolled division of abnormal cells in a part of the body",
    response: "Cancer",
    choices: "disfrxgu"
}, {
    category: "Nature",
    question: "Microscopic grains discharged from the male part of a flower",
    response: "Pollen",
    choices: "afvsgrwh"
}, {
    category: "Nature",
    question: "Where does a river end?",
    response: "Sea",
    choices: "pondliyzthu"
}, {
    category: "Nature",
    question: "Another name for a Medusa",
    response: "Jellyfish",
    choices: "pukot"
}, {
    category: "Nature",
    question: "Something that people want and need but escape from when it comes",
    response: "Rain",
    choices: "toxcmudsaw"
}, {
    category: "Nature",
    question: "Insect with 8 legs",
    response: "Spider",
    choices: "bugroach"
}, {
    category: "Nature",
    question: "Animal who loves eating bananas",
    response: "Monkey",
    choices: "grlachpm"
}, {
    category: "Nature",
    question: "___ in the day and moon at night",
    response: "Sun",
    choices: "raidyckopve"
}, {
    category: "Nature",
    question: "Sound made by a dog",
    response: "Barking",
    choices: "woofsax"
}, {
    category: "Nature",
    question: "Flying insect",
    response: "Bee",
    choices: "sabugtrwxof"
}, {
    category: "Nature",
    question: "Thick cloud of tiny water droplets suspended in the atmosphere that restricts visibility",
    response: "Fog",
    choices: "dbeaplnsywx"
}, {
    category: "Nature",
    question: "The phase of the moon in which its whole disc is illuminated",
    response: "Full",
    choices: "mvcjopqurt"
}, {
    category: "Nature",
    question: "Slow and lazy animal",
    response: "Sloth",
    choices: "turekaavw"
}, {
    category: "Nature",
    question: "Animal that builds dams",
    response: "Beaver",
    choices: "csmazegf"
}, {
    category: "Nature",
    question: "Country most at risk of a deadly volcanic eruption",
    response: "Indonesia",
    choices: "trepf"
}, {
    category: "Nature",
    question: "A panda's daily diet consists almost entirely of what plant",
    response: "Bamboo",
    choices: "frizwogl"
}, {
    category: "Nature",
    question: "Animal with the largest ears",
    response: "Elephant",
    choices: "gorilw"
}, {
    category: "Nature",
    question: "How many hearts does an octopus have ?",
    response: "Three",
    choices: "fouvixnna"
}, {
    category: "Nature",
    question: "Animal that sleeps around 22 hours each day",
    response: "Koala",
    choices: "sothuypnd"
}, {
    category: "Nature",
    question: "Polar bears feed mainly on what animal ?",
    response: "Seal",
    choices: "duckhrpngi"
}, {
    category: "Nature",
    question: "The fastest fish in the Ocean",
    response: "Sailfish",
    choices: "hrkwed"
}, {
    category: "Nature",
    question: "Animal that was rumored to bury its head in the sand when frightened",
    response: "Ostrich",
    choices: "dgamnky"
}, {
    category: "Nature",
    question: "Bird with a long sharp beak that it hammers repeatedly into wood in search of insects",
    response: "Woodpecker",
    choices: "lsta"
}, {
    category: "Nature",
    question: "The animal that is known as the ship of the desert",
    response: "Camel",
    choices: "qportwhan"
}, {
    category: "Nature",
    question: "Sweet and fleshy product of a tree",
    response: "Fruit",
    choices: "vegeablsf"
}, {
    category: "Nature",
    question: "Sudden and violent shaking of the ground",
    response: "Earthquake",
    choices: "jobs"
}, {
    category: "Nature",
    question: "Rounded protuberance found on the back of a camel",
    response: "Hump",
    choices: "blockgrave"
}, {
    category: "Nature",
    question: "Sound made by a bear",
    response: "Growl",
    choices: "hatchlytz"
}, {
    category: "Nature",
    question: "Sound made by a duck",
    response: "Quack",
    choices: "wsergnjil"
}, {
    category: "Complete\nProverb",
    question: "Two ___ don't make a right",
    response: "Wrongs",
    choices: "pojhtknd"
}, {
    category: "Complete\nProverb",
    question: "Better late than ___",
    response: "Never",
    choices: "mazasqimu"
}, {
    category: "Complete\nProverb",
    question: "A picture is worth a ___ words",
    response: "Thousand",
    choices: "vlembi"
}, {
    category: "Complete\nProverb",
    question: "Innocent until proven ___",
    response: "Guilty",
    choices: "convakwb"
}, {
    category: "Complete\nProverb",
    question: "The early bird catches the ___",
    response: "Worm",
    choices: "mustrazexl"
}, {
    category: "Complete\nProverb",
    question: "Keep your friends close and your ___ closer",
    response: "Enemies",
    choices: "adolflp"
}, {
    category: "Complete\nProverb",
    question: "Don't bite the ___ that feeds you",
    response: "Hand",
    choices: "mouthpersl"
}, {
    category: "Complete\nProverb",
    question: "You can't judge a ___ by its cover",
    response: "Book",
    choices: "humanemfzg"
}, {
    category: "Complete\nProverb",
    question: "Necessity is the mother of ___",
    response: "Invention",
    choices: "alscc"
}, {
    category: "Complete\nProverb",
    question: "Practice makes ___",
    response: "Perfect",
    choices: "goodaws"
}, {
    category: "Who said?",
    question: "I have not failed. I've just found 10000 ways that won't work",
    response: "Edison",
    choices: "estnbell"
}, {
    category: "Albert\nEinstein",
    question: "Life is like riding a bicycle. To keep your balance you must keep ___",
    response: "Moving",
    choices: "calmedup"
}, {
    category: "Who said?",
    question: "Imagination is more important than knowledge",
    response: "Einstein",
    choices: "hacprx"
}, {
    category: "Who said?",
    question: "Live as if you were to die tomorrow. Learn as if you were to live forever",
    response: "Gandhi",
    choices: "htibwrel"
}, {
    category: "Soccer",
    question: "2016 Ballon d'or winner",
    response: "Ronaldo",
    choices: "messibg"
}, {
    category: "Soccer",
    question: "Team holding the UEFA Champions League cups record",
    response: "RealMadrid",
    choices: "cnbh"
}, {
    category: "Soccer",
    question: "Brazilian legendary player considered the best ever",
    response: "Pele",
    choices: "donamessit"
}, {
    category: "Soccer",
    question: "Name of the derby match between Real Madrid and Barcelona",
    response: "Clasico",
    choices: "holpbzu"
}, {
    category: "Basketball",
    question: "NBA and Chicago Bulls legendary player",
    response: "Jordan",
    choices: "lryweikb"
}, {
    category: "Sports",
    question: "First city that hosted the Olympics",
    response: "Athens",
    choices: "londopar"
}, {
    category: "General",
    question: "What does the Statue of Liberty hold in her right hand ?",
    response: "Torch",
    choices: "xblasvikp"
}, {
    category: "General",
    question: "In which country would you find the Panama Canal ?",
    response: "Panama",
    choices: "cubshtii"
}, {
    category: "General",
    question: "Famous prize given to award people who achieved advances in a specific field",
    response: "Nobel",
    choices: "lryweikbs"
}, {
    category: "General",
    question: "One of the highest mountains in the world above sea level",
    response: "Everest",
    choices: "hmlyago"
}, {
    category: "General",
    question: "International distress signal indicating that help is needed",
    response: "Sos",
    choices: "azertyqwvui"
}, {
    category: "General",
    question: "Measuring unit of energy",
    response: "Joule",
    choices: "whkcnoepi"
}, {
    category: "General",
    question: "Expel air from the lungs with a sudden sharp sound. Generally when a person is sick or smokes",
    response: "Cough",
    choices: "breatpixq"
}, {
    category: "General",
    question: "Biggest planet in our solar system",
    response: "Jupiter",
    choices: "marslod"
}, {
    category: "General",
    question: "Comes before thunder",
    response: "Lightning",
    choices: "sumra"
}, {
    category: "General",
    question: "In the head",
    response: "Eye",
    choices: "nosmothzcxp"
}, {
    category: "General",
    question: "A state of feeling sad desperate and without the mood to do anything",
    response: "Depression",
    choices: "scdu"
}, {
    category: "General",
    question: "A military stronghold",
    response: "Fortress",
    choices: "caslvw"
}, {
    category: "General",
    question: "Chairman and co-founder of Facebook",
    response: "Zuckerberg",
    choices: "mats"
}, {
    category: "General",
    question: "Co-founder of Microsoft",
    response: "BillGates",
    choices: "josve"
}, {
    category: "General",
    question: "Power to unilaterally stop an official action in the UN security council",
    response: "Veto",
    choices: "blckusrfwq"
}, {
    category: "General",
    question: "Inventor of the telephone",
    response: "Bell",
    choices: "grnstiwzam"
}, {
    category: "General",
    question: "German automobile manufacturer",
    response: "Audi",
    choices: "oplrnuizvw"
}, {
    category: "General",
    question: "Japanese automobile manufacturer",
    response: "Toyota",
    choices: "misubzkh"
}, {
    category: "General",
    question: "French automobile manufacturer",
    response: "Renault",
    choices: "pegcinv"
}, {
    category: "General",
    question: "Italian automobile manufacturer",
    response: "AlfaRomeo",
    choices: "rrtis"
}, {
    category: "General",
    question: "British automobile manufacturer",
    response: "LandRover",
    choices: "rgbet"
}, {
    category: "General",
    question: "American automobile manufacturer",
    response: "Ford",
    choices: "Dgejplambw"
}, {
    category: "General",
    question: "Emperor of the French in the early 1800s",
    response: "Napoleon",
    choices: "bnrtaq"
}, {
    category: "General",
    question: "Fortified complex at the heart of Moscow referred to as the government of the Russian Federation",
    response: "Kremlin",
    choices: "cvpouzw"
}, {
    category: "General",
    question: "A widespread of an infectious disease",
    response: "Epidemic",
    choices: "sklubj"
}, {
    category: "General",
    question: "1000 kilograms",
    response: "Ton",
    choices: "grkialzwmce"
}, {
    category: "General",
    question: "Unit of frequency equal to one cycle per second",
    response: "Hertz",
    choices: "wajoulyfd"
}, {
    category: "General",
    question: "A high level educational institution in which students study for degrees and academic research",
    response: "University",
    choices: "cllg"
}, {
    category: "General",
    question: "Marvel superhero who got his superpowers from an insect",
    response: "Spiderman",
    choices: "btufr"
}, {
    category: "General",
    question: "Unit of measure used in oil industry",
    response: "Barrel",
    choices: "cmetnoix"
}, {
    category: "General",
    question: "Bright green precious stone",
    response: "Emerald",
    choices: "ioncryx"
}, {
    category: "General",
    question: "Precious stone considered the hardest naturally occurring substance",
    response: "Diamond",
    choices: "erwpiuf"
}, {
    category: "General",
    question: "Analgesic and narcotic drug used medicinally to relieve pain",
    response: "Morphine",
    choices: "xtsyzu"
}, {
    category: "General",
    question: "A gland in the body that secretes insulin into the blood",
    response: "Pancreas",
    choices: "xtsyzu"
}, {
    category: "General",
    question: "The headquarters of the United States Department of Defense",
    response: "Pentagon",
    choices: "whusie"
}, {
    category: "General",
    question: "In which state is The Pentagon located ?",
    response: "Virginia",
    choices: "azoewy"
}, {
    category: "General",
    question: "Organization of the Petroleum Exporting Countries",
    response: "OPEC",
    choices: "sefhmzwiub"
}, {
    category: "General",
    question: "Process that involves rearrangement of the molecular or ionic structure of a substance is called ___ reaction",
    response: "Chemical",
    choices: "python"
}, {
    category: "General",
    question: "Name of the Academy Awards for artistic and technical merit in the American film industry",
    response: "Oscars",
    choices: "emmyblgf"
}, {
    category: "General",
    question: "Inventor of a system of reading and writing used by the blind",
    response: "Braille",
    choices: "xvogufp"
}, {
    category: "General",
    question: "Hottest planet in our solar system",
    response: "Venus",
    choices: "Marscrypt"
}, {
    category: "General",
    question: "System for transmitting messages from a distance along a wire",
    response: "Telegraph",
    choices: "twmob"
}, {
    category: "General",
    question: "Famous historical novel by Victor Hugo",
    response: "Miserables",
    choices: "gupy"
}, {
    category: "General",
    question: "Sight - Sound - Smell - Taste - Touch",
    response: "Senses",
    choices: "cthigopz"
}, {
    category: "General",
    question: "Seeds from which chocolate is made",
    response: "Cocoa",
    choices: "pitmjreuw"
}, {
    category: "General",
    question: "What was the name of the sword in the stone according to king Arthur's legend ",
    response: "Excalibur",
    choices: "pomad"
}, {
    category: "General",
    question: "North Atlantic Treaty Organization",
    response: "NATO",
    choices: "ydbpgojcxe"
}, {
    category: "General",
    question: "The use of chopsticks originated in what country",
    response: "China",
    choices: "Japnvietm"
}, {
    category: "General",
    question: "The United Kingdom's withdrawal from the European Union is commonly known as ___",
    response: "Brexit",
    choices: "plagvqum"
}, {
    category: "General",
    question: 'The slogan "Impossible is nothing" was created for which company ?',
    response: "Adidas",
    choices: "nkeferrx"
}, {
    category: "General",
    question: "Unit to measure temperature besides Fahrenheit",
    response: "Celsius",
    choices: "avogewz"
}, {
    category: "General",
    question: "Who discovered gravity ?",
    response: "Newton",
    choices: "davicigl"
}, {
    category: "General",
    question: "Who demonstrated air pressure ?",
    response: "Pascal",
    choices: "davicigl"
}, {
    category: "General",
    question: "Name of the first satellite that was launched into space in 1957",
    response: "Sputnik",
    choices: "apollox"
}, {
    category: "General",
    question: "About 70% of the human body is ___",
    response: "Water",
    choices: "bloodizkf"
}, {
    category: "General",
    question: "The first atomic bomb ever used in war-time was dropped on what city",
    response: "Hiroshima",
    choices: "nagak"
}, {
    category: "General",
    question: "The second atomic bomb ever used in war-time was dropped on what city",
    response: "Nagasaki",
    choices: "hiromz"
}, {
    category: "General",
    question: "Most popular digital currency",
    response: "Bitcoin",
    choices: "dolareu"
}, {
    category: "General",
    question: "The first man to set foot on the moon",
    response: "Armstrong",
    choices: "gaiyu"
}, {
    category: "General",
    question: "Dynamite inventor",
    response: "Nobel",
    choices: "pjudilwve"
}, {
    category: "General",
    question: "Carrying genetic information in the form of genes",
    response: "Chromosome",
    choices: "adni"
}, {
    category: "General",
    question: "The envelope of gases surrounding the earth or another planet",
    response: "Atmosphere",
    choices: "gnix"
}, {
    category: "General",
    question: "One of the primary colors",
    response: "Red",
    choices: "pbluckwhige"
}, {
    category: "General",
    question: "One of the primary colors",
    response: "Blue",
    choices: "aylowrdgrn"
}, {
    category: "General",
    question: "One of the primary colors",
    response: "Green",
    choices: "fblurdyow"
}, {
    category: "General",
    question: "What color do we get by mixing red and yellow ?",
    response: "Orange",
    choices: "puplevit"
}, {
    category: "General",
    question: "What color do we get by mixing black and white ?",
    response: "Gray",
    choices: "nblackwhit"
}, {
    category: "General",
    question: "Surgeon who performed the world's first human-to-human heart transplant",
    response: "Barnard",
    choices: "hofemkz"
}, {
    category: "General",
    question: "Financial district of lower Manhattan in New York City",
    response: "WallStreet",
    choices: "gfhi"
}, {
    category: "General",
    question: "One of Shakespeare's most famous plays",
    response: "Hamlet",
    choices: "jkfdogsx"
}, {
    category: "General",
    question: "The human body has 206 of them",
    response: "Bones",
    choices: "matrychwi"
}, {
    category: "General",
    question: "Dark volcanic rock",
    response: "Basalt",
    choices: "opruybsn"
}, {
    category: "General",
    question: "Famous german composer and pianist",
    response: "Beethoven",
    choices: "claps"
}, {
    category: "General",
    question: "Continuous pain in the head",
    response: "Headache",
    choices: "migrix"
}, {
    category: "History",
    question: "In 1867 the United States purchased Alaska from ___",
    response: "Russia",
    choices: "canadmxo"
}, {
    category: "History",
    question: "Who was the Prime Minister of Italy during World War II",
    response: "Mussolini",
    choices: "tlerb"
}, {
    category: "History",
    question: "Argentine Marxist revolutionary. A major figure of the Cuban Revolution",
    response: "Guevara",
    choices: "chnstox"
}, {
    category: "History",
    question: "South African revolutionary and political leader",
    response: "Mandela",
    choices: "wsonchp"
}, {
    category: "History",
    question: "Famous ship that sank in 1912",
    response: "Titanic",
    choices: "polbrvw"
}, {
    category: "Vocabulary",
    question: "Smart and intelligent",
    response: "Clever",
    choices: "moasqdgb"
}, {
    category: "Vocabulary",
    question: "Borrowing money from someone",
    response: "Loan",
    choices: "tkeigxmpuy"
}, {
    category: "Vocabulary",
    question: "Widely known person",
    response: "Famous",
    choices: "elbykcmb"
}, {
    category: "Vocabulary",
    question: "Son of a king",
    response: "Prince",
    choices: "sskaipon"
}, {
    category: "Vocabulary",
    question: "Something you do that nobody was expecting",
    response: "Surprise",
    choices: "blowpr"
}, {
    category: "Vocabulary",
    question: "Another name for a cell phone",
    response: "Mobile",
    choices: "smartgsk"
}, {
    category: "Vocabulary",
    question: "Used as a greeting or to begin a telephone conversation",
    response: "Hello",
    choices: "darchsbyi"
}, {
    category: "Vocabulary",
    question: "Speaking quietly with a very soft voice",
    response: "Whisper",
    choices: "cknuhgq"
}, {
    category: "Vocabulary",
    question: "Funny story or anecdote",
    response: "Joke",
    choices: "newsplkgig"
}, {
    category: "Vocabulary",
    question: "Treat a person or speak to him with disrespect",
    response: "Insult",
    choices: "teaszopm"
}, {
    category: "Vocabulary",
    question: "Large and huge",
    response: "Enormous",
    choices: "vatbig"
}, {
    category: "Vocabulary",
    question: "The floor of a building which is partly or entirely below ground level",
    response: "Basement",
    choices: "cullrf"
}, {
    category: "Vocabulary",
    question: "The opposite of someone cheap",
    response: "Generous",
    choices: "fichyv"
}, {
    category: "Vocabulary",
    question: "A popular traditional story without author usually intended to teach a lesson",
    response: "Myth",
    choices: "legndjplxa"
}, {
    category: "Vocabulary",
    question: "Military Rank",
    response: "Colonel",
    choices: "litgraf"
}, {
    category: "Vocabulary",
    question: "Military Rank",
    response: "Sergeant",
    choices: "xoffig"
}, {
    category: "Vocabulary",
    question: "Sound of water washing someone's throat or mouth",
    response: "Gargling",
    choices: "dkcmop"
}, {
    category: "Vocabulary",
    question: "A person who is kidnapped and the kidnapper asks for a ransom for his release",
    response: "Hostage",
    choices: "helvicm"
}, {
    category: "Vocabulary",
    question: "Measure unit of land area",
    response: "Acre",
    choices: "kilometrez"
}, {
    category: "Vocabulary",
    question: "Underground railway system in a city",
    response: "Metro",
    choices: "trainbusq"
}, {
    category: "Vocabulary",
    question: "Two babies born at the same time",
    response: "Twins",
    choices: "isblgvuao"
}, {
    category: "Vocabulary",
    question: "United States Dollars",
    response: "USD",
    choices: "euroyenzwqf"
}, {
    category: "Vocabulary",
    question: "A seat that you put on the back of a horse for riding",
    response: "Saddle",
    choices: "ltherbik"
}, {
    category: "Vocabulary",
    question: "A prolonged state of deep unconsciousness",
    response: "Coma",
    choices: "blakutsihw"
}, {
    category: "Vocabulary",
    question: "24 hours",
    response: "Day",
    choices: "journmthwix"
}, {
    category: "Vocabulary",
    question: "365 Days",
    response: "Year",
    choices: "bsxtulgtqu"
}, {
    category: "Vocabulary",
    question: "366 Days",
    response: "LeapYear",
    choices: "jiocmz"
}, {
    category: "Vocabulary",
    question: "1000 millions",
    response: "Billion",
    choices: "thndsuw"
}, {
    category: "Vocabulary",
    question: "Firmly held belief or opinion",
    response: "Conviction",
    choices: "erty"
}, {
    category: "Vocabulary",
    question: "Social media and sound of a bird",
    response: "Twitter",
    choices: "facbogk"
}, {
    category: "Vocabulary",
    question: "Mandatory",
    response: "Obligatory",
    choices: "pumn"
}, {
    category: "Vocabulary",
    question: "Another name for enemy",
    response: "Foe",
    choices: "bittradvygk"
}, {
    category: "Vocabulary",
    question: "Union and pact",
    response: "Alliance",
    choices: "ssotxy"
}, {
    category: "Vocabulary",
    question: "Permanant and everlasting",
    response: "Eternal",
    choices: "dingcot"
}, {
    category: "Vocabulary",
    question: "Crying and wailing",
    response: "Weeping",
    choices: "kdflvbu"
}, {
    category: "Vocabulary",
    question: "Person who is fully grown or developed",
    response: "Adult",
    choices: "womanbigz"
}, {
    category: "Vocabulary",
    question: "Shout of encouragement or joy",
    response: "Cheer",
    choices: "llobstgin"
}, {
    category: "Vocabulary",
    question: "An establishment providing accommodation and meals for travellers and tourists",
    response: "Hotel",
    choices: "mranchuxf"
}, {
    category: "Vocabulary",
    question: "Person who buys goods or services from a shop or business",
    response: "Customer",
    choices: "lintfa"
}, {
    category: "Vocabulary",
    question: "What do we call a space filled with too many people ?",
    response: "Crowded",
    choices: "ppultgi"
}, {
    category: "Vocabulary",
    question: "Opposite of Honest",
    response: "Liar",
    choices: "mnabedkgwu"
}, {
    category: "Vocabulary",
    question: "Opposite of Courageous",
    response: "Coward",
    choices: "brvejkwz"
}, {
    category: "Vocabulary",
    question: "Opposite of Smart",
    response: "Stupid",
    choices: "mbwnhogl"
}, {
    category: "Vocabulary",
    question: "Opposite of Closed",
    response: "Open",
    choices: "azrtyupqxv"
}, {
    category: "Vocabulary",
    question: "Opposite of Unlucky",
    response: "Lucky",
    choices: "freeotnta"
}, {
    category: "Vocabulary",
    question: "Opposite of Worst",
    response: "Best",
    choices: "wlagoodnic"
}, {
    category: "Vocabulary",
    question: "Opposite of Small",
    response: "Tall",
    choices: "bigsmiquve"
}, {
    category: "Vocabulary",
    question: "Opposite of Union",
    response: "Division",
    choices: "separt"
}, {
    category: "Vocabulary",
    question: "Used to refer to a person",
    response: "You",
    choices: "meaxthyfwak"
}, {
    category: "Vocabulary",
    question: "Feeling or showing confidence in myself",
    response: "Confident",
    choices: "assur"
}, {
    category: "Vocabulary",
    question: "Pulled to fire a gun",
    response: "Trigger",
    choices: "fguowal"
}, {
    category: "Vocabulary",
    question: "Someone who won't change his opinion despite good arguments or reasons to do so",
    response: "Stubborn",
    choices: "eacish"
}, {
    category: "Vocabulary",
    question: "Broad piece of metal used as a protection from sword attacks",
    response: "Shield",
    choices: "tepvufjq"
}, {
    category: "Vocabulary",
    question: "Detest and loathe",
    response: "Hate",
    choices: "jlikgorbuv"
}, {
    category: "Vocabulary",
    question: "Fruit that helped Newton to discover gravity ?",
    response: "Apple",
    choices: "ineorangy"
}, {
    category: "Vocabulary",
    question: "Soft white powdery limestone used to write or draw on boards",
    response: "Chalk",
    choices: "pencixfqu"
}, {
    category: "Vocabulary",
    question: "A person who acts on behalf of another in particular celebrities",
    response: "Agent",
    choices: "torybpquf"
}, {
    category: "Vocabulary",
    question: "Used as a polite or respectful way of addressing a man",
    response: "Sir",
    choices: "mstegntlvwc"
}, {
    category: "Vocabulary",
    question: "A sticky or slimy substance",
    response: "Goo",
    choices: "azertypvbni"
}, {
    category: "Vocabulary",
    question: "Fixed regular payment typically paid on a monthly basis",
    response: "Salary",
    choices: "wgpourxt"
}, {
    category: "Vocabulary",
    question: "Tropical tree",
    response: "Palm",
    choices: "wgpourxtbn"
}, {
    category: "Vocabulary",
    question: "Seeing something that isn't real",
    response: "Illusion",
    choices: "pxctgf"
}, {
    category: "Vocabulary",
    question: "The action of promoting and advertising products or services",
    response: "Marketing",
    choices: "plast"
}, {
    category: "Vocabulary",
    question: "Something that can replace something else",
    response: "Substitute",
    choices: "habk"
}, {
    category: "Vocabulary",
    question: "Letters and packages sent by post",
    response: "Mail",
    choices: "gopratshwn"
}, {
    category: "Vocabulary",
    question: "Needing or ready for sleep",
    response: "Sleepy",
    choices: "kizutnfw"
}, {
    category: "Vocabulary",
    question: "Paragraph or article in laws and contracts",
    response: "Clause",
    choices: "zivbnghj"
}, {
    category: "Vocabulary",
    question: "Extreme or irrational fear of something",
    response: "Phobia",
    choices: "zesdcvik"
}, {
    category: "Vocabulary",
    question: "Large underground vault for burying the dead",
    response: "Tomb",
    choices: "xgraveydsh"
}, {
    category: "Vocabulary",
    question: "The powdery residue left after the burning of a substance",
    response: "Ash",
    choices: "dfireklxypu"
}, {
    category: "Vocabulary",
    question: "Static and doing nothing",
    response: "Idle",
    choices: "wzroplmaqu"
}, {
    category: "Vocabulary",
    question: "A man who has magical powers",
    response: "Wizard",
    choices: "mgclpftb"
}, {
    category: "Vocabulary",
    question: "A woman who has magical powers",
    response: "Witch",
    choices: "zebrahoxn"
}, {
    category: "Vocabulary",
    question: "A man trained to fight in an arena in ancient Rome",
    response: "Gladiator",
    choices: "soley"
}, {
    category: "Vocabulary",
    question: "An elaborate musical composition for full orchestra",
    response: "Symphony",
    choices: "elgafv"
}, {
    category: "Vocabulary",
    question: "Plural of Child",
    response: "Children",
    choices: "skidza"
}, {
    category: "Vocabulary",
    question: "Plural of Foot",
    response: "Feet",
    choices: "lissuragwz"
}, {
    category: "Vocabulary",
    question: "Plural of  Tooth",
    response: "Teeth",
    choices: "xsziopmbv"
}, {
    category: "Vocabulary",
    question: "Plural of Man",
    response: "Men",
    choices: "xsziopmbvrt"
}, {
    category: "Vocabulary",
    question: "Plural of Mouse",
    response: "Mice",
    choices: "syclarhgov"
}, {
    category: "Vocabulary",
    question: "Plural of Hill",
    response: "Hills",
    choices: "ayxuojhzk"
}, {
    category: "Vocabulary",
    question: "The communication of disease from one person to another by close contact",
    response: "Contagion",
    choices: "sklyr"
}, {
    category: "Vocabulary",
    question: "Chivalrous and honourable man",
    response: "Gentleman",
    choices: "dsiry"
}, {
    category: "Vocabulary",
    question: "Successor of a person who died",
    response: "Heir",
    choices: "dsiryxcpuz"
}, {
    category: "Vocabulary",
    question: "Light-Emitting Diode",
    response: "LED",
    choices: "typslkhjbnz"
}, {
    category: "Vocabulary",
    question: "Statue or other structure erected to commemorate a famous person",
    response: "Monument",
    choices: "ublxir"
}, {
    category: "Vocabulary",
    question: "Collection of precious things wanted by pirates",
    response: "Treasure",
    choices: "zgoldy"
}, {
    category: "Vocabulary",
    question: "Cut down grass with a machine",
    response: "Mow",
    choices: "wingjlaters"
}, {
    category: "Vocabulary",
    question: "Small opening in a floor allowing access from one area to another",
    response: "Hatch",
    choices: "copyrefix"
}, {
    category: "Vocabulary",
    question: "Lie detector",
    response: "Polygraph",
    choices: "bliks"
}, {
    category: "Vocabulary",
    question: "Saying something that is not true",
    response: "Lie",
    choices: "xseayjobclf"
}, {
    category: "Vocabulary",
    question: "A court of justice",
    response: "Tribunal",
    choices: "pzokne"
}, {
    category: "Vocabulary",
    question: "Person who uses strength to intimidate those who are weaker. More often in school",
    response: "Bully",
    choices: "cassfiedn"
}, {
    category: "Vocabulary",
    question: "Rapid surprise attack on an enemy by troops or aircraft or other armed forces",
    response: "Raid",
    choices: "ymplontghw"
}, {
    category: "Vocabulary",
    question: "Underwater missile designed to be fired from a ship or submarine",
    response: "Torpedo",
    choices: "glasyhb"
}, {
    category: "Vocabulary",
    question: "Color of healthy lungs",
    response: "Pink",
    choices: "greybluwht"
}, {
    category: "Vocabulary",
    question: "Said about a person's face when he is in shock or sick",
    response: "Pale",
    choices: "mbzrwdhuxz"
}, {
    category: "Vocabulary",
    question: "Hard surface of the egg",
    response: "Shell",
    choices: "plasticbi"
}, {
    category: "Vocabulary",
    question: "Strong desire and determination to do or to achieve something",
    response: "Ambition",
    choices: "wusyjr"
}, {
    category: "Vocabulary",
    question: "Animal that is hunted by another for food",
    response: "Prey",
    choices: "mlkjhgfdsq"
}, {
    category: "Vocabulary",
    question: "Young child who is just beginning to walk",
    response: "Toddler",
    choices: "kiszuvc"
}, {
    category: "Vocabulary",
    question: "Artificial hair that you put on the head",
    response: "Wig",
    choices: "clasypowzre"
}, {
    category: "Vocabulary",
    question: "Monumental structure built of stone as a royal tomb in ancient Egypt",
    response: "Pyramid",
    choices: "nhusvto"
}, {
    category: "Vocabulary",
    question: "The alphabet is composed of consonants and ___",
    response: "Vowels",
    choices: "nhusamot"
}, {
    category: "Riddle",
    question: "Cries without eyes and walks without legs",
    response: "Cloud",
    choices: "blaksmith"
}, {
    category: "Riddle",
    question: "Laugh without sound and without opening your mouth",
    response: "Smile",
    choices: "lsdnqfkpe"
}, {
    category: "Riddle",
    question: "Everyone needs it. They generously give it. But rarely take it",
    response: "Advice",
    choices: "lssonhux"
}, {
    category: "Riddle",
    question: "Who makes it has no need of it. Who buys it has no use for it. Who uses it can't see it",
    response: "Coffin",
    choices: "wpejakrt"
}, {
    category: "Riddle",
    question: "Feed me and I live. Give me a drink and I die",
    response: "Fire",
    choices: "qubagglsmt"
}, {
    category: "Riddle",
    question: "Take off my skin\nI won't cry but you will",
    response: "Onion",
    choices: "aplemyzdx"
}, {
    category: "Riddle",
    question: "What invention lets you look right through a wall ?",
    response: "Window",
    choices: "glassytx"
}, {
    category: "Riddle",
    question: "What is always coming but never arrives?",
    response: "Tomorrow",
    choices: "fuesvp"
}, {
    category: "Riddle",
    question: "What has to be broken before you can use it",
    response: "Egg",
    choices: "wsbihancoum"
}, {
    category: "Riddle",
    question: "They come out at night and are lost in the day",
    response: "Stars",
    choices: "pubemnivx"
}, {
    category: "Riddle",
    question: "If you threw a white stone into the Red Sea what would it become?",
    response: "Wet",
    choices: "frdpoqublyg"
}, {
    category: "Geography",
    question: "Capital of an european country",
    response: "Berlin",
    choices: "mdapsguz"
}, {
    category: "Geography",
    question: "Scandinavian country",
    response: "Norway",
    choices: "sdmrklcd"
}, {
    category: "Geography",
    question: "Africa; Europe; North America; South America; Australia; Antarctica and ___",
    response: "Asia",
    choices: "oceanypltx"
}, {
    category: "Geography",
    question: "The highest mountain range in North America",
    response: "Rocky",
    choices: "csadeslph"
}, {
    category: "Geography",
    question: "One of the four main directions",
    response: "West",
    choices: "northsupfi"
}, {
    category: "Geography",
    question: "One of the four main directions",
    response: "South",
    choices: "nrtswepfi"
}, {
    category: "Geography",
    question: "Where is based the UNESCO headquarters ?",
    response: "Paris",
    choices: "belnzuchw"
}, {
    category: "Geography",
    question: "Country between Germany and Ukraine",
    response: "Poland",
    choices: "frcetugh"
}, {
    category: "Geography",
    question: "Largest lake in South America on the border of Bolivia and Peru",
    response: "Titicaca",
    choices: "pesduj"
}, {
    category: "Geography",
    question: "Smallest country in the European Union",
    response: "Malta",
    choices: "vicndorlh"
}, {
    category: "Geography",
    question: "Capital of Germany",
    response: "Berlin",
    choices: "pasmuchn"
}, {
    category: "Geography",
    question: "Capital of China",
    response: "Beijing",
    choices: "pktoysl"
}, {
    category: "Geography",
    question: "Capital of Algeria",
    response: "Algiers",
    choices: "cosrntb"
}, {
    category: "Geography",
    question: "Capital of South Africa",
    response: "Capetown",
    choices: "bgzmix"
}, {
    category: "Geography",
    question: "Capital of Peru",
    response: "Lima",
    choices: "chlebrzsqg"
}, {
    category: "Geography",
    question: "Capital of Japan",
    response: "Tokyo",
    choices: "seulpinwf"
}, {
    category: "Geography",
    question: "Capital of Italy",
    response: "Rome",
    choices: "inzfuttdgc"
}, {
    category: "Geography",
    question: "Capital of Canada",
    response: "Ottawa",
    choices: "nrioqube"
}, {
    category: "Geography",
    question: "Capital of Switzerland",
    response: "Bern",
    choices: "zuichaslvg"
}, {
    category: "Geography",
    question: "Capital of Brazil",
    response: "Brasilia",
    choices: "jneorz"
}, {
    category: "Geography",
    question: "The Biggest Mediterranean island",
    response: "Sicily",
    choices: "palmadrn"
}, {
    category: "Geography",
    question: "The Largest island on earth",
    response: "Greenland",
    choices: "icsuf"
}, {
    category: "Geography",
    question: "What city in Australia has the highest population",
    response: "Sydney",
    choices: "twzaljak"
}, {
    category: "Geography",
    question: "Largest ocean on planet earth",
    response: "Pacific",
    choices: "atlntmd"
}, {
    category: "Geography",
    question: "The Grand Canyon is located in which US state ?",
    response: "Arizona",
    choices: "vegiuth"
}, {
    category: "Geography",
    question: "Largest country in North America",
    response: "Canada",
    choices: "bgmexior"
}, {
    category: "Geography",
    question: "Arab country in Africa",
    response: "Algeria",
    choices: "mroctns"
}, {
    category: "Geography",
    question: "Diagrammatic representation of planet earth or area of land",
    response: "Map",
    choices: "brenchvlody"
}, {
    category: "Geography",
    question: "Largest state in the US",
    response: "Alaska",
    choices: "texcifon"
}, {
    category: "Geography",
    question: "The most famous country for hot springs",
    response: "NewZealand",
    choices: "indo"
}, {
    category: "Famous For",
    question: "Pizza\nPasta\nFerrari\nPisa Tower",
    response: "Italy",
    choices: "mntorczpf"
}, {
    category: "Famous For",
    question: "Alhambra\nFlamenco\nIbiza\nTomatina",
    response: "Spain",
    choices: "ortultkyv"
}, {
    category: "Famous For",
    question: "Fuji\nKimono\nMangas\nSushi",
    response: "Japan",
    choices: "korchidvt"
}, {
    category: "Famous For",
    question: "Pamukkale\nTroy\nBlue Mosque\nGallipoli",
    response: "Turkey",
    choices: "grcabnsi"
}, {
    category: "Famous For",
    question: "Basketball\nHawaii\nLincoln\nMcDonald",
    response: "USA",
    choices: "ntuemlkdqfo"
}, {
    category: "Famous For",
    question: "Cricket\nBollywood\nTaj Mahal\nSpicy food",
    response: "India",
    choices: "pkstyurex"
}, {
    category: "Famous For",
    question: "Tacos\nMariachis\nAvocado\nMayan Pyramids",
    response: "Mexico",
    choices: "brazlsid"
}, {
    category: "Famous For",
    question: "Mission Impossible\nTop Gun\nThe Last Samurai\nJack Reacher",
    response: "TomCruise",
    choices: "dprak"
}, {
    category: "Famous For",
    question: "Titanic\nAviator\nInception\nThe Revenant",
    response: "Dicaprio",
    choices: "rsejkw"
}, {
    category: "Famous For",
    question: "Pirates of The Caribbean\nDonnie Brasco\nAlice in Wonderland\nSweeney Todd",
    response: "depp",
    choices: "johnadlwis"
}, {
    category: "Famous For",
    question: "Serpico\nThe Godfather\nScarface\nHeat",
    response: "Alpacino",
    choices: "mrksdv"
}, {
    category: "Famous For",
    question: "Gladiator\nA Beautiful Mind\nThe Insider\nAmerican Gangster",
    response: "Crowe",
    choices: "spiywzulf"
}, {
    category: "Famous For",
    question: "Forrest Gump\nSaving Private Ryan\nCast Away\nDa Vinci Code",
    response: "TomHanks",
    choices: "alwuis"
}, {
    category: "Famous For",
    question: "Braveheart\nThe Patriot\nMad Max\nLethal Weapon",
    response: "MelGibson",
    choices: "fqukc"
}, {
    category: "Famous For",
    question: "Fight Club\nTroy\nMr. & Mrs. Smith\nWorld War Z",
    response: "BradPitt",
    choices: "mlzwfg"
}, {
    category: "Famous For",
    question: "Goodfellas\nThe Godfather 2\nShowtime\nThe Fan",
    response: "DeNiro",
    choices: "bvxjaudl"
}, {
    category: "Famous For",
    question: "Batman Begins\nThe Dark Knight\nLeon\nAir Force One",
    response: "GaryOldman",
    choices: "belj"
}, {
    category: "Famous For",
    question: "Men In Black\nI Am Legend\nBad Boys\nI Robot",
    response: "WillSmith",
    choices: "bkcad"
}, {
    category: "Famous For",
    question: "Seven\nThe Shawshank Redemption\nBatman Begins\nNow You See Me",
    response: "Freeman",
    choices: "ghjuxpw"
}, {
    category: "Famous For",
    question: "Pulp Fiction\nAvengers\nThe Negotiator\nCoach Carter",
    response: "Jackson",
    choices: "simleyb"
}, {
    category: "Famous For",
    question: "Taken\nBatman Begins\nStar Wars: Episode I\nThe Grey",
    response: "Neeson",
    choices: "lvpacmwf"
}, {
    category: "Famous For",
    question: "007",
    response: "JamesBond",
    choices: "pkerz"
}, {
    category: "Math",
    question: "5-5",
    response: "Zero",
    choices: "funineblyt"
}, {
    category: "Math",
    question: "1x1",
    response: "One",
    choices: "pamslkdhgty"
}, {
    category: "Math",
    question: "1+1",
    response: "Two",
    choices: "fgneoazwrty"
}, {
    category: "Math",
    question: "580 - 577",
    response: "Three",
    choices: "fourivght"
}, {
    category: "Math",
    question: "108 ÷ 27",
    response: "Four",
    choices: "bivxshjetp"
}, {
    category: "Math",
    question: "2+3",
    response: "Five",
    choices: "ourkhtnzwb"
}, {
    category: "Math",
    question: "10125 - 10119",
    response: "Six",
    choices: "tmpolnbvcxw"
}, {
    category: "Math",
    question: "10-3",
    response: "Seven",
    choices: "dfghjklty"
}, {
    category: "Math",
    question: "10-3",
    response: "Seven",
    choices: "dfghjklty"
}, {
    category: "Math",
    question: "736 ÷ 92",
    response: "Eight",
    choices: "cvbnazert"
}, {
    category: "Math",
    question: "360 ÷ 40",
    response: "Nine",
    choices: "tksjgnfonb"
}, {
    category: "Math",
    question: "5x2",
    response: "Ten",
    choices: "apoghniwxsz"
}, {
    category: "Math",
    question: "1000 meter",
    response: "Kilometer",
    choices: "iugrs"
}, {
    category: "Photo",
    question: "1",
    response: "Parrot",
    choices: "bidspquk"
}, {
    category: "Photo",
    question: "2",
    response: "Ladybug",
    choices: "winsect"
}, {
    category: "Photo",
    question: "3",
    response: "Crab",
    choices: "blimfgoyes"
}, {
    category: "Photo",
    question: "4",
    response: "Jellyfish",
    choices: "mdsav"
}, {
    category: "Photo",
    question: "5",
    response: "Dough",
    choices: "braidzpmx"
}, {
    category: "Photo",
    question: "6",
    response: "Saxophone",
    choices: "cvbnj"
}, {
    category: "Photo",
    question: "7",
    response: "Hockey",
    choices: "ballscrt"
}, {
    category: "Photo",
    question: "8",
    response: "Balloon",
    choices: "jvletxn"
}, {
    category: "Photo",
    question: "9",
    response: "Mouse",
    choices: "keybonlwz"
}, {
    category: "Photo",
    question: "10",
    response: "IceCream",
    choices: "upiolf"
}, {
    category: "Photo",
    question: "11",
    response: "Orca",
    choices: "sharkdlpht"
}, {
    category: "Photo",
    question: "12",
    response: "Balloon",
    choices: "ckendyz"
}, {
    category: "Photo",
    question: "13",
    response: "Microscope",
    choices: "hvta"
}, {
    category: "Photo",
    question: "14",
    response: "Muffin",
    choices: "pcakegtu"
}, {
    category: "Photo",
    question: "15",
    response: "Glasses",
    choices: "nwedrxp"
}, {
    category: "Photo",
    question: "16",
    response: "Burger",
    choices: "klipzsgn"
}, {
    category: "Photo",
    question: "17",
    response: "Bike",
    choices: "dmotrcycle"
}, {
    category: "Photo",
    question: "18",
    response: "Peacock",
    choices: "rrtheng"
}, {
    category: "Photo",
    question: "19",
    response: "Fireworks",
    choices: "hangr"
}, {
    category: "Photo",
    question: "20",
    response: "Satellite",
    choices: "peckz"
}, {
    category: "Photo",
    question: "21",
    response: "Raccoon",
    choices: "tbeverd"
}, {
    category: "Photo",
    question: "22",
    response: "Rope",
    choices: "quklsjdfie"
}, {
    category: "Photo",
    question: "23",
    response: "Bulb",
    choices: "lightndery"
}, {
    category: "Photo",
    question: "24",
    response: "Chain",
    choices: "plstkfrag"
}, {
    category: "Photo",
    question: "25",
    response: "Dumbbells",
    choices: "wight"
}, {
    category: "Photo",
    question: "26",
    response: "Fork",
    choices: "sponiethzx"
}, {
    category: "Photo",
    question: "27",
    response: "Rope",
    choices: "quklsjdfie"
}, {
    category: "Photo",
    question: "28",
    response: "Scissors",
    choices: "bladej"
}, {
    category: "Photo",
    question: "29",
    response: "Strings",
    choices: "heanbvo"
}, {
    category: "Photo",
    question: "30",
    response: "Armor",
    choices: "shieldxzy"
}, {
    category: "Photo",
    question: "31",
    response: "Owl",
    choices: "birdplastom"
}, {
    category: "Photo",
    question: "32",
    response: "Sushi",
    choices: "platefish"
}, {
    category: "Photo",
    question: "33",
    response: "Basketball",
    choices: "socr"
}, {
    category: "Photo",
    question: "34",
    response: "Knife",
    choices: "blatzuwmq"
}, {
    category: "Photo",
    question: "35",
    response: "Pencakes",
    choices: "wrtyni"
}, {
    category: "Photo",
    question: "36",
    response: "Bridge",
    choices: "penclfge"
}, {
    category: "Photo",
    question: "37",
    response: "Rose",
    choices: "flwrlillyz"
}, {
    category: "Photo",
    question: "38",
    response: "Pizza",
    choices: "astelmind"
}, {
    category: "Photo",
    question: "39",
    response: "Drone",
    choices: "flyairpne"
}, {
    category: "Photo",
    question: "40",
    response: "Fan",
    choices: "motorengine"
}, {
    category: "Photo",
    question: "41",
    response: "Compass",
    choices: "bwtchyz"
}, {
    category: "Photo",
    question: "42",
    response: "Bottle",
    choices: "ckealstg"
}, {
    category: "Photo",
    question: "43",
    response: "Phone",
    choices: "lastbvmrt"
}, {
    category: "Photo",
    question: "44",
    response: "Violin",
    choices: "gutaroxs"
}, {
    category: "Photo",
    question: "45",
    response: "Snake",
    choices: "cobramamb"
}, {
    category: "Photo",
    question: "46",
    response: "Computer",
    choices: "kyboad"
}, {
    category: "Photo",
    question: "47",
    response: "Garlic",
    choices: "onionrkw"
}, {
    category: "Photo",
    question: "48",
    response: "Seal",
    choices: "poiuytrbzc"
}, {
    category: "Photo",
    question: "49",
    response: "Zebra",
    choices: "sheplongy"
}, {
    category: "Photo",
    question: "50",
    response: "Moon",
    choices: "planetarth"
}, {
    category: "Photo",
    question: "51",
    response: "Tomato",
    choices: "elnciruv"
}, {
    category: "Photo",
    question: "52",
    response: "Jewels",
    choices: "trurnkgi"
}, {
    category: "Photo",
    question: "53",
    response: "Radio",
    choices: "tlkwapcdf"
}, {
    category: "Photo",
    question: "54",
    response: "Guitar",
    choices: "violinsm"
}, {
    category: "Photo",
    question: "55",
    response: "Camera",
    choices: "lnsphgqu"
}, {
    category: "Photo",
    question: "56",
    response: "Coins",
    choices: "monetrabl"
}, {
    category: "Photo",
    question: "57",
    response: "Pills",
    choices: "medicazof"
}, {
    category: "Photo",
    question: "58",
    response: "Books",
    choices: "livrepage"
}, {
    category: "Photo",
    question: "59",
    response: "Nenuphar",
    choices: "lackyw"
}];
WitchCrossward.Preload = function(game) {
    this.all_words = null;
    this.vect_words = null;
    this.mat_grid = null;
    this.score_mat = null;
    this.best_mat = null;
    this.rows = null;
    this.cols = null
}
;
WitchCrossward.Preload.prototype = {
    preload: function() {
        game.add.sprite(0, 0, "bgPreload");
        var progressBar = game.add.image(33 * resolution, 205.7 * resolution, "preloadSprite01");
        game.load.setPreloadSprite(progressBar);
        var txt_progress = game.add.text(135 * resolution, 170 * resolution, "", {
            font: 22 * resolution + langFont2,
            align: "center",
            fill: "#ffffff",
            stroke: "#000000",
            strokeThickness: 3 * resolution
        });
        game.load.onFileComplete.add(function(progress) {
            txt_progress.setText(progress + "%");
            txt_progress.x = game.width / 2 - txt_progress.width / 2
        }, this);
        game.load.image("cloud_logo_vr", cloud_logos.vertical);
        game.load.image("rotate", "assets/rotate" + resolution + ".png");
        game.load.spritesheet("levelbnt", "assets/levelbnt" + resolution + ".png", 40 * resolution, 43 * resolution);
        game.load.image("bgPlay", "assets/bgPlay" + resolution + ".png");
        game.load.image("bgnoire", "assets/bgnoire" + resolution + ".png");
        game.load.image("bg_tuto1", "assets/bg_tuto1" + resolution + ".png");
        game.load.image("bg_tuto2", "assets/bg_tuto2" + resolution + ".png");
        game.load.image("credits", "assets/credits" + resolution + ".png");
        game.load.image("etoile_particule", "assets/etoile_particule" + resolution + ".png");
        game.load.image("map1", "assets/map1" + resolution + ".png");
        game.load.image("map2", "assets/map2" + resolution + ".png");
        game.load.image("star_off", "assets/star_off" + resolution + ".png");
        game.load.image("star_on", "assets/star_on" + resolution + ".png");
        game.load.image("light_snow", "assets/light_snow" + resolution + ".png");
        game.load.spritesheet("container_letter", "assets/container_letter" + resolution + ".png", 37.5 * resolution, 42.5 * resolution);
        game.load.spritesheet("squares", "assets/squares" + resolution + ".png", 20 * resolution, 22.5 * resolution);
        game.load.spritesheet("witch_idle", "assets/witch_idle" + resolution + ".png", 90 * resolution, 115 * resolution);
        game.load.spritesheet("witch_happy", "assets/witch_happy" + resolution + ".png", 91 * resolution, 117 * resolution);
        game.load.spritesheet("witch_sad", "assets/witch_sad" + resolution + ".png", 91 * resolution, 115 * resolution);
        game.load.spritesheet("witch_veryhappy", "assets/witch_veryhappy" + resolution + ".png", 150 * resolution, 216 * resolution);
        game.load.spritesheet("images", "assets/images" + resolution + ".jpg", 150 * resolution, 100 * resolution);
        game.load.audio("song17", ["assets/music/song17.ogg", "assets/music/song17.mp3"]);
        game.load.audio("sounds", ["assets/music/sounds.ogg", "assets/music/sounds.mp3"]);
        this.ready = false
    },
    create: function() {
        if (!this.game.device.desktop)
            this.game.scale.forceOrientation(false, true, "rotate");
        if (game.device.localStorage) {
            this.TestPrivate();
            var str = Save_getItem("WitchCrossward_sauvegarde", null);
            str_mat = Save_getItem("WitchCrossward_mat", null);
            str_mat_player = Save_getItem("WitchCrossward_mat_player", null);
            level = Save_getItem("WitchCrossward_level", 0);
            nbr_hints = Save_getItem("WitchCrossward_hints", 1);
            if (str == null || str == "null" || level == null || level == "null") {
                sauvegarde = [];
                for (var i = 0; i < nombre_levels; i++) {
                    sauvegarde[i] = {
                        numetoile: 0,
                        time: -1,
                        nbr_words: 0,
                        nbr_found: 0
                    }
                }
                all_words = words;
                save_words(all_words);
                level = 0;
                Save_setItem("WitchCrossward_level", level);
                nbr_hints = 1;
                Save_setItem("WitchCrossward_hints", nbr_hints)
            } else {
                save_lire(str)
            }
        }
        GameAPI.trackLoadComplete();
    },
    TestPrivate: function() {
        var testKey = "qeTest"
          , storage = window.sessionStorage;
        try {
            storage.setItem(testKey, "1");
            storage.removeItem(testKey)
        } catch (error) {
            if (error.code === DOMException.QUOTA_EXCEEDED_ERR && storage.length === 0) {
                isPrivate = true
            } else {
                isPrivate = false
            }
        }
    },
    update: function() {
        if (game.cache.isSoundDecoded("song17") && game.cache.isSoundDecoded("sounds") && this.ready == false) {
            this.ready = true;
            game.onPause.add(function() {
                gamePaused = true;
                Music.music.pause();
                Music.sounds.pause()
            }, this);
            game.onResume.add(function() {
                gamePaused = false;
                if (Music.enableMisic) {
                    Music.music.resume();
                    Music.sounds.resume()
                }
            }, this);
            this.game.state.start("menu");
            play.numLevel = parseInt(level) + 1;
            Music.win = this.game.add.audio("win");
            Music.music = this.game.add.audio("song17");
            Music.sounds = this.game.add.audio("sounds");
            Music.sounds.addMarker("button", 0, .07789115646258503);
            Music.sounds.addMarker("correct", 2, .770249433106576);
            Music.sounds.addMarker("incorrect", 4, 1.190385487528345);
            Music.sounds.addMarker("powerup", 7, .91312925170068);
            Music.sounds.addMarker("pre_star", 9, .220113378684808);
            Music.sounds.addMarker("select", 10, .174149659863945);
            Music.sounds.addMarker("remove_letter", 11, .170045351473924);
            Music.sounds.addMarker("select_letter", 13, .404489795918368);
            Music.sounds.addMarker("select_letter2", 15, .367732426303855);
            Music.sounds.addMarker("select_letter3", 17, .306462585034012);
            Music.sounds.addMarker("select_letter4", 19, .23573696145125);
            Music.sounds.addMarker("select_letter5", 21, .22002267573696);
            Music.sounds.addMarker("select_letter6", 23, .183378684807256);
            Music.sounds.addMarker("select_letter7", 25, .16671201814059);
            Music.sounds.addMarker("select_letter8", 27, .15156462585034);
            Music.sounds.addMarker("star", 29, .605804988662133);
            Music.sounds.addMarker("star2", 31, .572267573696145);
            Music.sounds.addMarker("star3", 33, .46612244897959);
            Music.sounds.addMarker("witch_laugh", 35, .60371882086168);
            Music.sounds.addMarker("witch_menu", 37, 1.960634920634924);
            Music.sounds.addMarker("witch_sad", 40, .630204081632655);
            Music.sounds.addMarker("whoosh", 42, .87074829931973);
            Music.sounds.addMarker("win", 44, 1.589614512471655);
            Music.music.play();
            Music.music.onStop.add(function() {
                if (gamePaused)
                    return;
                if (Music.enableMisic)
                    Music.music.play()
            }, this)
        }
    }
};
var Bouton = function(game, x, y, key, callback, callbackContext, overFrame, outFrame, downFrame) {
    Phaser.Button.call(this, game, x, y, key, callback, callbackContext, overFrame, outFrame, downFrame);
    this.anchor.setTo(.5, .5);
    this.onInputDown.add(function() {
        if (this.key != "bnt_show" && this.key != "bnt_delete")
            this.scale.setTo(this.scale.x + .2, this.scale.y + .2);
        if (Music.enableMisic)
            Music.sounds.play("button");
        if (this.txt) {
            game.world.bringToTop(this.txt);
            this.txt.scale.setTo(1.2, 1.2)
        }
    }, this);
    this.onInputUp.add(function() {
        this.scale.setTo(this.scale.x - .2, this.scale.y - .2);
        if (this.txt) {
            game.world.bringToTop(this.txt);
            this.txt.scale.setTo(1, 1)
        }
    }, this);
    this.onInputOver.add(function() {}, this)
};
Bouton.prototype = Object.create(Phaser.Button.prototype);
Bouton.prototype.constructor = Bouton;
WitchCrossward.Menu = function(game) {
    this.musicbnt = null;
    this.bnt_play = null;
    this.bnt_credits = null;
    this.bnt_moregames = null;
    this.logo = null;
    this.tween_play = null;
    this.state = null;
    this.witch_light = null;
    this.witch = null;
    this.emitter = null;
    this.emitter_witch = null
}
;
WitchCrossward.Menu.prototype = {
    create: function() {
        this.add.image(0, 0, "bgMenu");
        game.time.events.add(1, function() {
            this.emitter_witch = null;
            this.emitter = game.add.emitter(120 * resolution, 490 * resolution, 500);
            this.emitter.makeParticles("light_snow");
            this.emitter.maxParticleScale = 1;
            this.emitter.minParticleScale = .3;
            this.emitter.setYSpeed(-20, -100);
            this.emitter.setXSpeed(40, -40);
            this.emitter.width = game.world.width;
            this.emitter.gravity = 0;
            this.emitter.start(false, 1e4, 400);
            this.logo = game.add.sprite(game.width / 2, 0, "sprites2");
            this.logo.frameName = "logo" + resolution + ".png";
            this.logo.y += this.logo.height / 2;
            this.logo.scale.setTo(0, 0);
            this.logo.anchor.setTo(.5, .5);
            game.time.events.add(150, function() {
                if (Music.enableMisic)
                    Music.sounds.play("whoosh")
            }, this);
            game.add.tween(this.logo.scale).to({
                x: 1,
                y: 1
            }, 400, Phaser.Easing.Back.Out, false, 300).start().onComplete.add(function() {
                game.time.events.add(1050, function() {
                    game.add.tween(this.logo.scale).to({
                        x: .8,
                        y: 1.15
                    }, 500, Phaser.Easing.Back.Out, false, 3e3).to({
                        x: 1,
                        y: 1
                    }, 400, Phaser.Easing.Elastic.Out).loop().start()
                }, this)
            }, this);
            this.bnt_play = new Bouton(this.game,game.width / 2,410 * resolution,"sprites2",this.actionPlay,this);
            this.bnt_play.frameName = "playbtn" + resolution + ".png";
            this.bnt_play.scale.setTo(0, 0);
            this.world.add(this.bnt_play);
            this.musicbnt = new Bouton(this.game,game.width - 25 * resolution,20 * resolution,"sprites2",this.actionMusic,this);
            this.musicbnt.frameName = "musicbnt" + resolution + ".png";
            this.musicbnt.scale.setTo(0, 0);
            this.world.add(this.musicbnt);
            this.bnt_credits = new Bouton(this.game,25 * resolution,20 * resolution,"sprites2",this.funccredits,this);
            this.bnt_credits.frameName = "creditsBnt" + resolution + ".png";
            this.bnt_credits.scale.setTo(0, 0);
            this.world.add(this.bnt_credits);
            this.bnt_moregames = new Bouton(this.game,game.width - 27 * resolution,455 * resolution,"sprites2",this.func_moregames,this);
            this.bnt_moregames.frameName = "moregames_bnt" + resolution + ".png";
            this.bnt_moregames.scale.setTo(0, 0);
            this.world.add(this.bnt_moregames);
            this.witch_light = game.add.sprite(game.width / 2 - 12 * resolution, 317 * resolution, "sprites2", "witch_light" + resolution + ".png");
            this.witch_light.anchor.setTo(.5, .5);
            this.witch_light.scale.setTo(0, 0);
            game.add.tween(this.witch_light.scale).to({
                x: 1,
                y: 1
            }, 400, Phaser.Easing.Quadratic.InOut, false, 1400).start();
            this.witch = game.add.sprite(215 * resolution, 353 * resolution, "sprites2", "witch_menu" + resolution + ".png");
            this.witch.anchor.setTo(.5, .5);
            this.witch.scale.setTo(0, 0);
            game.time.events.add(1500, function() {
                if (Music.enableMisic)
                    Music.sounds.play("witch_menu");
                this.emitter_witch = game.add.emitter(game.width / 2 + 50 * resolution, 230 * resolution + this.witch.height / 2, 15);
                this.emitter_witch.makeParticles("etoile_particule");
                this.emitter_witch.setAlpha(1, 0, 1e3, Phaser.Easing.Linear.None);
                this.emitter_witch.setScale(1, .5, 1e3, Phaser.Easing.Linear.None);
                this.emitter_witch.minParticleSpeed.setTo(-100, 0);
                this.emitter_witch.maxParticleSpeed.setTo(100, 100);
                this.emitter_witch.width = 100 * resolution;
                this.emitter_witch.start(false, 1200, 15, 15)
            }, this);
            game.add.tween(this.witch).to({
                x: 115 * resolution,
                y: 333 * resolution
            }, 400, Phaser.Easing.Quadratic.InOut, false, 1e3).to({
                x: game.width / 2 + 40 * resolution,
                y: 220 * resolution
            }, 400, Phaser.Easing.Quadratic.InOut).start();
            game.add.tween(this.witch.scale).to({
                x: 1,
                y: 1
            }, 800, Phaser.Easing.Quadratic.InOut, false, 1e3).start().onComplete.add(function() {
                game.add.tween(this.bnt_play.scale).to({
                    x: 1,
                    y: 1
                }, 400, Phaser.Easing.Back.Out, false, 0).start().onComplete.add(function() {
                    game.add.tween(this.witch).to({
                        y: this.witch.y + 10 * resolution
                    }, 1500, Phaser.Easing.Quadratic.InOut).to({
                        y: this.witch.y
                    }, 1500, Phaser.Easing.Quadratic.InOut).loop().start();
                    this.tween_play = game.add.tween(this.bnt_play.scale).to({
                        x: .85,
                        y: .85
                    }, 1500, Phaser.Easing.Quadratic.Out).to({
                        x: 1,
                        y: 1
                    }, 1500, Phaser.Easing.Quadratic.Out);
                    this.tween_play.start();
                    this.tween_play.loop()
                }, this);
                game.add.tween(this.musicbnt.scale).to({
                    x: 1,
                    y: 1
                }, 400, Phaser.Easing.Back.Out, false, 200).start();
                game.add.tween(this.bnt_credits.scale).to({
                    x: 1,
                    y: 1
                }, 400, Phaser.Easing.Back.Out, false, 400).start();
                game.add.tween(this.bnt_moregames.scale).to({
                    x: 1,
                    y: 1
                }, 400, Phaser.Easing.Back.Out, false, 600).start()
            }, this);
            if (Music.enableMisic) {
                this.musicbnt.frameName = "musicbnt" + resolution + ".png"
            } else {
                this.musicbnt.frameName = "Mutemusicbnt" + resolution + ".png"
            }
        }, this);
        if (CloudAPI.logos.active()) {
            var cloud_logo = new Bouton(this.game,game.width / 2,450 * resolution,"cloud_logo_vr",this.func_cloud,this);
            cloud_logo.width = 80 * resolution;
            cloud_logo.height = 60 * resolution;
            cloud_logo.x = 2 * resolution + cloud_logo.width / 2;
            this.world.add(cloud_logo)
        }
    },
    func_cloud: function() {
        if (CloudAPI.links.active()) {
            window.open(CloudAPI.links.list()["logo"])
        }
    },
    func_moregames: function() {
        if (CloudAPI.links.active()) {
            window.open(CloudAPI.links.list()["games"])
        }
    },
    actionMusic: function() {
        Music.enableMisic = !Music.enableMisic;
        if (Music.enableMisic) {
            this.musicbnt.frameName = "musicbnt" + resolution + ".png";
            Music.music.resume()
        } else {
            this.musicbnt.frameName = "Mutemusicbnt" + resolution + ".png";
            Music.music.pause()
        }
    },
    actionPlay: function() {
        play.InitialiseFade("levels");
        GameAPI.trackLevelStart();
    },
    funccredits: function() {
        play.InitialiseFade("credits")
    },
    update: function() {}
};
WitchCrossward.Credits = function(game) {
    this.bnt_home = null
}
;
WitchCrossward.Credits.prototype = {
    create: function() {
        this.add.image(0, 0, "credits");
        this.bnt_home = new Bouton(this.game,game.width / 2,0,"sprites2",this.funcHome,this);
        this.bnt_home.frameName = "bnt_home" + resolution + ".png";
        this.world.add(this.bnt_home)
    },
    funcHome: function() {
        play.InitialiseFade("menu")
    },
    update: function() {
        if (this.bnt_home.y < 40 * resolution) {
            this.bnt_home.y += 5
        }
    }
};
WitchCrossward.Map_Levels = function(game) {
    this.debut_swip = null;
    this.moveto = null;
    this.bnt_home = null;
    this.isbegin = null;
    this.vitess_camera = null;
    this.bnt_level = null;
    this.vect_positions = null;
    this.group_bnt = null;
    this.is_cam_moving = null;
    this.stop_position = null;
    this.group_ghosts = null
}
;
WitchCrossward.Map_Levels.prototype = {
    create: function() {
        this.vect_positions = [{
            x: 190 * resolution,
            y: 457 * resolution,
            num: 1
        }, {
            x: 152 * resolution,
            y: 428 * resolution,
            num: 2
        }, {
            x: 115 * resolution,
            y: 400 * resolution,
            num: 3
        }, {
            x: 75 * resolution,
            y: 370 * resolution,
            num: 4
        }, {
            x: 50 * resolution,
            y: 330 * resolution,
            num: 5
        }, {
            x: 70 * resolution,
            y: 290 * resolution,
            num: 6
        }, {
            x: 103 * resolution,
            y: 255 * resolution,
            num: 7
        }, {
            x: 243 * resolution,
            y: 218 * resolution,
            num: 8
        }, {
            x: 185 * resolution,
            y: 190 * resolution,
            num: 9
        }, {
            x: 160 * resolution,
            y: 150 * resolution,
            num: 10
        }, {
            x: 108 * resolution,
            y: 157 * resolution,
            num: 11
        }, {
            x: 108 * resolution,
            y: 105 * resolution,
            num: 12
        }, {
            x: 163 * resolution,
            y: 70 * resolution,
            num: 13
        }, {
            x: 95 * resolution,
            y: 50 * resolution,
            num: 14
        }, {
            x: 138 * resolution,
            y: 22 * resolution,
            num: 15
        }, {
            x: 165 * resolution,
            y: -12 * resolution,
            num: 16
        }, {
            x: 130 * resolution,
            y: -47 * resolution,
            num: 17
        }, {
            x: 110 * resolution,
            y: -85 * resolution,
            num: 18
        }, {
            x: 158 * resolution,
            y: -105 * resolution,
            num: 19
        }, {
            x: 205 * resolution,
            y: -125 * resolution,
            num: 20
        }, {
            x: 225 * resolution,
            y: -167 * resolution,
            num: 21
        }, {
            x: 200 * resolution,
            y: -205 * resolution,
            num: 22
        }, {
            x: 180 * resolution,
            y: -245 * resolution,
            num: 23
        }, {
            x: 220 * resolution,
            y: -272 * resolution,
            num: 24
        }, {
            x: 240 * resolution,
            y: -310 * resolution,
            num: 25
        }, {
            x: 220 * resolution,
            y: -348 * resolution,
            num: 26
        }, {
            x: 180 * resolution,
            y: -370 * resolution,
            num: 27
        }, {
            x: 135 * resolution,
            y: -385 * resolution,
            num: 28
        }, {
            x: 140 * resolution,
            y: -428 * resolution,
            num: 29
        }, {
            x: 170 * resolution,
            y: -460 * resolution,
            num: 30
        }];
        this.add.sprite(0, 0, "map1");
        this.add.sprite(0, -480 * resolution, "map2");
        game.world.setBounds(0, -480 * resolution, 320 * resolution, 960 * resolution);
        this.isbegin = auto_camera;
        this.vitess_camera = 0;
        this.debut_swip = 0;
        this.moveto = 0;
        this.is_cam_moving = true;
        game.input.onDown.add(this.start_swipe, this);
        this.group_ghosts = game.add.group();
        var ghost1 = game.add.sprite(95 * resolution, 325 * resolution, "sprites2", "ghost" + resolution + ".png");
        ghost1.anchor.setTo(.5, .5);
        game.add.tween(ghost1).to({
            y: ghost1.y + 5 * resolution
        }, 1500, Phaser.Easing.Quadratic.InOut).to({
            y: ghost1.y
        }, 1500, Phaser.Easing.Quadratic.InOut).loop().start();
        game.add.tween(ghost1).to({
            alpha: 0,
            height: 0
        }, 400, Phaser.Easing.Quadratic.In, false, 4e3).to({
            alpha: 1,
            height: ghost1.texture.height
        }, 400, Phaser.Easing.Back.Out, false, 4e3).loop().start();
        this.group_ghosts.add(ghost1);
        var ghost2 = game.add.sprite(265 * resolution, 115 * resolution, "sprites2", "ghost" + resolution + ".png");
        ghost2.anchor.setTo(.5, .5);
        game.add.tween(ghost2).to({
            y: ghost2.y + 5 * resolution
        }, 1500, Phaser.Easing.Quadratic.InOut).to({
            y: ghost2.y
        }, 1500, Phaser.Easing.Quadratic.InOut).loop().start();
        game.add.tween(ghost2).to({
            alpha: 0,
            height: 0
        }, 400, Phaser.Easing.Quadratic.In, false, 5e3).to({
            alpha: 1,
            height: ghost2.texture.height
        }, 400, Phaser.Easing.Back.Out, false, 5e3).loop().start();
        this.group_ghosts.add(ghost2);
        var ghost3 = game.add.sprite(15 * resolution, -38 * resolution, "sprites2", "ghost" + resolution + ".png");
        ghost3.anchor.setTo(.5, .5);
        ghost3.scale.x = -.7;
        game.add.tween(ghost3).to({
            y: ghost3.y + 5 * resolution
        }, 1500, Phaser.Easing.Quadratic.InOut).to({
            y: ghost3.y
        }, 1500, Phaser.Easing.Quadratic.InOut).loop().start();
        game.add.tween(ghost3).to({
            alpha: 0,
            height: 0
        }, 400, Phaser.Easing.Quadratic.In, false, 3e3).to({
            alpha: 1,
            height: ghost3.texture.height
        }, 400, Phaser.Easing.Back.Out, false, 3e3).loop().start();
        this.group_ghosts.add(ghost3);
        var ghost4 = game.add.sprite(177 * resolution, -160 * resolution, "sprites2", "ghost" + resolution + ".png");
        ghost4.anchor.setTo(.5, .5);
        ghost4.scale.x = -.7;
        game.add.tween(ghost4).to({
            y: ghost4.y + 5 * resolution
        }, 1500, Phaser.Easing.Quadratic.InOut).to({
            y: ghost4.y
        }, 1500, Phaser.Easing.Quadratic.InOut).loop().start();
        game.add.tween(ghost4).to({
            alpha: 0,
            height: 0
        }, 400, Phaser.Easing.Quadratic.In, false, 4e3).to({
            alpha: 1,
            height: ghost4.texture.height
        }, 400, Phaser.Easing.Back.Out, false, 4e3).loop().start();
        this.group_ghosts.add(ghost4);
        var ghost5 = game.add.sprite(247 * resolution, -227 * resolution, "sprites2", "ghost" + resolution + ".png");
        ghost5.anchor.setTo(.5, .5);
        game.add.tween(ghost5).to({
            y: ghost5.y + 5 * resolution
        }, 2e3, Phaser.Easing.Quadratic.InOut).to({
            y: ghost5.y
        }, 2e3, Phaser.Easing.Quadratic.InOut).loop().start();
        game.add.tween(ghost5).to({
            alpha: 0,
            height: 0
        }, 400, Phaser.Easing.Quadratic.In, false, 5e3).to({
            alpha: 1,
            height: ghost5.texture.height
        }, 400, Phaser.Easing.Back.Out, false, 5e3).loop().start();
        this.group_ghosts.add(ghost5);
        var ghost5 = game.add.sprite(265 * resolution, -215 * resolution, "sprites2", "ghost" + resolution + ".png");
        ghost5.anchor.setTo(.5, .5);
        ghost5.scale.setTo(.75, .75);
        game.add.tween(ghost5).to({
            y: ghost5.y + 5 * resolution
        }, 1500, Phaser.Easing.Quadratic.InOut).to({
            y: ghost5.y
        }, 1500, Phaser.Easing.Quadratic.InOut).loop().start();
        game.add.tween(ghost5).to({
            alpha: 0,
            height: 0
        }, 400, Phaser.Easing.Quadratic.In, false, 5e3).to({
            alpha: 1,
            height: ghost5.texture.height * .75
        }, 400, Phaser.Easing.Back.Out, false, 5e3).loop().start();
        this.group_ghosts.add(ghost5);
        var ghost6 = game.add.sprite(72 * resolution, -410 * resolution, "sprites2", "ghost" + resolution + ".png");
        ghost6.anchor.setTo(.5, .5);
        ghost6.scale.setTo(-.75, .75);
        game.add.tween(ghost6).to({
            y: ghost6.y + 5 * resolution
        }, 1500, Phaser.Easing.Quadratic.InOut).to({
            y: ghost6.y
        }, 1500, Phaser.Easing.Quadratic.InOut).loop().start();
        game.add.tween(ghost6).to({
            alpha: 0,
            height: 0
        }, 400, Phaser.Easing.Quadratic.In, false, 4e3).to({
            alpha: 1,
            height: ghost6.texture.height * .75
        }, 400, Phaser.Easing.Back.Out, false, 4e3).loop().start();
        this.group_ghosts.add(ghost6);
        this.group_bnt = game.add.group();
        var framebnt = 0;
        for (var i = 0; i < nombre_levels; i++) {
            framebnt = 0;
            this.bnt_level = new Bouton(this.game,this.vect_positions[i].x,this.vect_positions[i].y,"levelbnt",null,null);
            this.bnt_level.anchor.y = 1;
            this.bnt_level.y += this.bnt_level.height / 2;
            this.bnt_level.onInputUp.add(function() {
                if (this.frame != 4 && !lv.isbegin && !lv.is_cam_moving) {
                    lv.Activer_Input(false);
                    play.numLevel = parseInt(this.txt.text);
                    play.InitialiseFade("play");
                    play.bgnoire.y = game.camera.y
                }
            }, this.bnt_level);
            this.bnt_level.txt = new Phaser.Text(game,this.bnt_level.x - 4 * resolution,this.bnt_level.y - this.bnt_level.height / 2 - 2.25 * resolution,"" + this.vect_positions[i].num,{
                font: 13 * resolution + langFont,
                align: "center",
                fill: "#ffffff",
                stroke: "#125fff",
                strokeThickness: 2.5 * resolution
            });
            this.bnt_level.txt.x = this.bnt_level.x - this.bnt_level.txt.width / 2 + .5 * resolution;
            this.group_bnt.add(this.bnt_level);
            this.group_bnt.add(this.bnt_level.txt);
            if (+this.bnt_level.txt.text <= +level + 1) {
                framebnt = sauvegarde[+this.bnt_level.txt.text - 1].numetoile
            } else {
                framebnt = 4;
                this.bnt_level.txt.visible = false
            }
            this.bnt_level.frame = framebnt
        }
        game.camera.y = -480 * resolution;
        this.stop_position = this.vect_positions[level].y - this.group_bnt.getAt(0).height / 2 - 200 * resolution;
        if (this.stop_position > 50 * resolution)
            this.stop_position = 50 * resolution;
        if (this.isbegin && +level < 27) {
            game.add.tween(game.camera).to({
                y: this.stop_position
            }, 2500, Phaser.Easing.Quadratic.InOut).start().onComplete.add(function() {
                this.isbegin = false;
                this.camera.y = this.stop_position;
                auto_camera = false
            }, this)
        } else {
            game.camera.y = this.stop_position;
            this.isbegin = false;
            auto_camera = false
        }
        this.bnt_home = new Bouton(this.game,25 * resolution,25 * resolution,"sprites2",this.func_home,this);
        this.bnt_home.frameName = "bnt_home" + resolution + ".png";
        this.bnt_home.fixedToCamera = true;
        this.world.add(this.bnt_home);
        if (new_level) {
            if (play.numLevel - 1 <= 29)
                this.Show_Stars(level);
            else
                this.Show_Stars(+level + 1)
        }
    },
    start_swipe: function() {
        if (this.isbegin)
            return;
        this.debut_swip = game.input.activePointer.y;
        if (this.is_cam_moving)
            this.is_cam_moving = false
    },
    swipe_to: function() {
        if (game.input.activePointer.isDown) {
            this.moveto = game.input.activePointer.y
        }
        if (Math.abs(this.moveto - this.debut_swip) > .5) {
            game.camera.y -= game.time.elapsed * .001 * (40 * resolution) * (this.moveto - this.debut_swip) / 7;
            this.debut_swip += (this.moveto - this.debut_swip) / 7;
            if (!this.is_cam_moving)
                this.is_cam_moving = true
        }
    },
    update: function() {
        if (!this.isbegin && game.input.onDown.active) {
            this.swipe_to()
        }
    },
    func_home: function() {
        if (this.isbegin)
            return;
        play.InitialiseFade("menu");
        play.bgnoire.y = game.camera.y
    },
    Activer_Input: function(bool) {
        lv.group_bnt.forEach(function(sp) {
            game.input.onDown.active = bool
        }, this)
    },
    Show_Stars: function(numlevel) {
        this.Activer_Input(false);
        this.group_bnt.getAt(numlevel * 2 - 2).frame = 0;
        if (numlevel < nombre_levels) {
            this.group_bnt.getAt(numlevel * 2).txt.alpha = 0;
            this.group_bnt.getAt(numlevel * 2).frame = 4
        }
        if (sauvegarde[numlevel - 1].numetoile >= 1) {
            var star1 = game.add.sprite(this.group_bnt.getAt(numlevel * 2 - 2).x - 13 * resolution, this.group_bnt.getAt(numlevel * 2 - 2).y - 29.5 * resolution, "sprites2", "star_levels" + resolution + ".png");
            star1.scale.setTo(0, 0);
            star1.angle = -30;
            star1.anchor.setTo(.5, .5);
            game.add.tween(star1.scale).to({
                x: 1.1,
                y: 1.1
            }, 200, Phaser.Easing.Linear.None, false, 500).to({
                x: .72,
                y: .72
            }, 300, Phaser.Easing.Back.Out).start().onComplete.add(function() {
                game.time.events.add(100, function() {
                    if (Music.enableMisic && game.sound.usingWebAudio)
                        Music.sounds.play("pre_star");
                    if (Music.enableMisic && game.sound.usingWebAudio)
                        Music.sounds.play("star")
                }, this);
                var emitter = game.add.emitter(this.x, this.y - this.height / 4, 20);
                emitter.makeParticles("light_snow");
                emitter.setAlpha(1, 0, 1500, Phaser.Easing.Linear.None);
                emitter.setScale(.1, .25);
                emitter.minParticleSpeed.setTo(-50, -25);
                emitter.maxParticleSpeed.setTo(50, 50);
                emitter.start(true, 1500, 20, 20)
            }, star1)
        }
        if (sauvegarde[numlevel - 1].numetoile >= 2) {
            var star2 = game.add.sprite(this.group_bnt.getAt(numlevel * 2 - 2).x, this.group_bnt.getAt(numlevel * 2 - 2).y - 34.5 * resolution, "sprites2", "star_levels" + resolution + ".png");
            star2.anchor.setTo(.5, .5);
            star2.scale.setTo(0, 0);
            game.add.tween(star2.scale).to({
                x: 1.25,
                y: 1.25
            }, 200, Phaser.Easing.Linear.None, false, 1e3).to({
                x: .92,
                y: .92
            }, 300, Phaser.Easing.Back.Out).start().onComplete.add(function() {
                game.time.events.add(100, function() {
                    if (Music.enableMisic && game.sound.usingWebAudio)
                        Music.sounds.play("pre_star");
                    if (Music.enableMisic && game.sound.usingWebAudio)
                        Music.sounds.play("star2")
                }, this);
                var emitter = game.add.emitter(this.x, this.y - this.height / 4, 20);
                emitter.makeParticles("light_snow");
                emitter.setAlpha(1, 0, 1500, Phaser.Easing.Linear.None);
                emitter.setScale(.1, .25);
                emitter.minParticleSpeed.setTo(-50, -25);
                emitter.maxParticleSpeed.setTo(50, 50);
                emitter.start(true, 1500, 20, 20)
            }, star2)
        }
        if (sauvegarde[numlevel - 1].numetoile >= 3) {
            var star3 = game.add.sprite(this.group_bnt.getAt(numlevel * 2 - 2).x + 13.5 * resolution, this.group_bnt.getAt(numlevel * 2 - 2).y - 29 * resolution, "sprites2", "star_levels" + resolution + ".png");
            star3.scale.setTo(0, 0);
            star3.angle = 35;
            star3.anchor.setTo(.5, .5);
            game.add.tween(star3.scale).to({
                x: 1.1,
                y: 1.1
            }, 200, Phaser.Easing.Linear.None, false, 1500).to({
                x: .72,
                y: .72
            }, 300, Phaser.Easing.Back.Out).start().onComplete.add(function() {
                game.time.events.add(100, function() {
                    if (Music.enableMisic && game.sound.usingWebAudio)
                        Music.sounds.play("pre_star");
                    if (Music.enableMisic && game.sound.usingWebAudio)
                        Music.sounds.play("star3")
                }, this);
                var emitter = game.add.emitter(this.x, this.y - this.height / 4, 20);
                emitter.makeParticles("light_snow");
                emitter.setAlpha(1, 0, 1500, Phaser.Easing.Linear.None);
                emitter.setScale(.1, .25);
                emitter.minParticleSpeed.setTo(-50, -25);
                emitter.maxParticleSpeed.setTo(50, 50);
                emitter.start(true, 1500, 20, 20)
            }, star3)
        }
        game.time.events.add(sauvegarde[numlevel - 1].numetoile * 500 + 500, function() {
            this.group_bnt.getAt(numlevel * 2 - 2).frame = sauvegarde[numlevel - 1].numetoile;
            if (star1 && star1.alive)
                star1.kill();
            if (star2 && star2.alive)
                star2.kill();
            if (star3 && star3.alive)
                star3.kill();
            if (numlevel < nombre_levels) {
                game.add.tween(this.group_bnt.getAt(numlevel * 2).scale).to({
                    x: 0,
                    y: 0
                }, 200, Phaser.Easing.Linear.None, false, 200).to({
                    x: 1,
                    y: 1
                }, 500, Phaser.Easing.Back.Out).start().onComplete.add(function() {
                    this.group_bnt.getAt(numlevel * 2).frame = 0;
                    game.add.tween(this.group_bnt.getAt(numlevel * 2).txt).to({
                        alpha: 1
                    }, 300, Phaser.Easing.Quadratic.Out, false, 500).start()
                }, this)
            }
            this.Activer_Input(true);
            new_level = false
        }, this)
    }
};
WitchCrossward.Play = function(game) {
    this.numLevel = null;
    this.gameOver = false;
    this.next_level = null;
    this.bnt_pause = null;
    this.bnt_replay = null;
    this.bgPause = null;
    this.start = null;
    this.groupPause = null;
    this.groupNexLevel = null;
    this.textPause = null;
    this.textPauseLevel = null;
    this.textPauseScore = null;
    this.textPauseTarget = null;
    this.etoilEnd1 = null;
    this.etoilEnd2 = null;
    this.etoilEnd3 = null;
    this.timerEndLevel = null;
    this.timerEndLevelAndLose = null;
    this.istimerEndLevel = null;
    this.istimerEndLevelAndLose = null;
    this.isEndAllLevels = null;
    this.stateMusic = null;
    this.bgnoire = null;
    this.you_win = null;
    this.txt_level = null;
    this.minutes = null;
    this.secondss = null;
    this.bonus_time = null;
    this.current_score = null;
    this.txt_score = null;
    this.number_etoiles = null;
    this.txt_score_win = null;
    this.map = null;
    this.layer = null;
    this.txt_time = null;
    this.objectives_finished = null;
    this.objectif_etoile = null;
    this.vect_words = null;
    this.mat_grid = null;
    this.rows = null;
    this.cols = null;
    this.score_mat = null;
    this.best_mat = null;
    this.mat_player = null;
    this.taille = null;
    this.all_words = null;
    this.mat_sprites = null;
    this.left_bound = null;
    this.right_bound = null;
    this.top_bound = null;
    this.bottom_bound = null;
    this.groupCells = null;
    this.groupMenuWord = null;
    this.bg_category = null;
    this.bg_question = null;
    this.txt_question = null;
    this.img_question = null;
    this.txt_category = null;
    this.bnt_exit = null;
    this.bnt_show = null;
    this.bnt_delete = null;
    this.nbr_hints = null;
    this.txt_nbr_hints = null;
    this.cell_selected = null;
    this.info_selected = null;
    this.debut_swip = null;
    this.time_debut_swip = null;
    this.vect_cell_response = null;
    this.vect_cell_letters = null;
    this.nbr_letters_response = null;
    this.nbr_letters_found = null;
    this.nbr_letters_level = null;
    this.star1 = null;
    this.star2 = null;
    this.star3 = null;
    this.witch_girl = null;
    this.hand = null;
    this.group_unlock = null;
    this.bg_unlock = null;
    this.txt_unlock = null;
    this.bnt_next = null;
    this.bnt_continue = null;
    this.snd_remove = null;
    this.container_notification = null;
    this.loading_level = null;
    this.group_hud = null
}
;
WitchCrossward.Play.prototype = {
    create: function() {
        CloudAPI.play();
        this.container_notification = game.add.sprite(0, 0, "bgPlay");
        if (this.numLevel > nombre_levels) {
            this.createCongratulations();
            this.gameOver = true;
            return
        }
        this.loading_level = game.add.text(0, 200 * resolution, text.txtLoadingLevel, {
            font: 25 * resolution + langFont2,
            align: "center",
            fill: "#ffffff",
            stroke: "#000000",
            strokeThickness: 3 * resolution
        });
        this.loading_level.x = game.width / 2 - this.loading_level.width / 2;
        game.time.events.add(1e3, function() {
            try {
                load_matrice(play.numLevel - 1);
                if (matrice[0][1] === undefined || play.numLevel == 1 && matrice[6][8] == "") {
                    this.GenerateLevels(play.numLevel - 1);
                    load_matrice(play.numLevel - 1)
                }
                if (play.loading_level != null)
                    play.loading_level.destroy();
                if (play.container_notification != null)
                    play.container_notification.destroy()
            } catch (error) {
                if (matrice[0][1] === undefined || play.numLevel == 1 && matrice[6][8] == "") {
                    this.GenerateLevels(play.numLevel - 1);
                    load_matrice(play.numLevel - 1)
                }
                if (play.loading_level != null)
                    play.loading_level.destroy();
                if (play.container_notification != null)
                    play.container_notification.destroy()
            }
            this.initAtributs();
            nbr_hints = +Save_getItem("WitchCrossward_hints", 1);
            game.add.image(0, 0, "bgPlay");
            this.number_etoiles = sauvegarde[play.numLevel - 1].numetoile;
            this.createButtonsPlay();
            new_level = false;
            this.nbr_letters_response = 0;
            this.nbr_letters_found = 0;
            this.nbr_letters_level = 0;
            this.vect_cell_response = [];
            this.vect_cell_letters = [];
            this.debut_swip = {};
            this.time_debut_swip = null;
            this.info_selected = {
                word: "",
                category: "",
                question: "",
                choices: "",
                visible_letters: "",
                ind: -1
            };
            this.nbr_hints = nbr_hints;
            this.snd_remove = 0;
            this.txt_nbr_hints = game.add.text(0, 15 * resolution, text.txtHint + this.nbr_hints, {
                font: 18 * resolution + langFont2,
                align: "center",
                fill: "#ffffff",
                stroke: "#975e2b",
                strokeThickness: 2 * resolution
            });
            this.txt_nbr_hints.x = 263 * resolution - this.txt_nbr_hints.width / 2;
            this.txt_level = game.add.text(0, 9 * resolution, text.txtlevel + this.numLevel, {
                font: 18 * resolution + langFont2,
                align: "center",
                fill: "#ffffff",
                stroke: "#975e2b",
                strokeThickness: 2 * resolution
            });
            this.txt_level.x = game.width / 2 - this.txt_level.width / 2 + 10 * resolution;
            if (sauvegarde[play.numLevel - 1].time == -1) {
                this.minutes = Math.floor(timeLevel[play.numLevel - 1] / 60);
                this.secondss = timeLevel[play.numLevel - 1] % 60
            } else {
                this.minutes = Math.floor(sauvegarde[play.numLevel - 1].time / 60);
                this.secondss = sauvegarde[play.numLevel - 1].time % 60
            }
            this.bonus_time = this.minutes * 60 + this.secondss;
            this.bonus_timer = 1e3;
            this.txt_time = game.add.text(68 * resolution, 15 * resolution, this.minutes + ":0" + this.secondss, {
                font: 18 * resolution + langFont2,
                align: "center",
                fill: "#ffffff",
                stroke: "#975e2b",
                strokeThickness: 2 * resolution
            });
            if (this.secondss >= 10) {
                this.txt_time.setText(this.minutes + ":" + this.secondss)
            }
            this.star1 = game.add.sprite(150 * resolution, 32 * resolution, "star_off");
            this.star1.x = game.width / 2 + 10 * resolution - this.star1.width / 2 - 26 * resolution;
            if (this.number_etoiles >= 1)
                this.star1.loadTexture("star_on");
            this.star2 = game.add.sprite(150 * resolution, 32 * resolution, "star_off");
            this.star2.x = game.width / 2 + 10 * resolution - this.star2.width / 2;
            if (this.number_etoiles >= 2)
                this.star2.loadTexture("star_on");
            this.star3 = game.add.sprite(150 * resolution, 32 * resolution, "star_off");
            this.star3.x = game.width / 2 + 10 * resolution - this.star2.width / 2 + 26 * resolution;
            if (this.number_etoiles >= 3)
                this.star3.loadTexture("star_on");
            this.group_hud.add(this.star1);
            this.group_hud.add(this.star2);
            this.group_hud.add(this.star3);
            this.group_hud.add(this.txt_nbr_hints);
            this.group_hud.add(this.txt_level);
            this.group_hud.add(this.txt_time);
            this.cell_selected = null;
            this.taille = 20 * resolution;
            this.rows = 20;
            this.cols = 20;
            this.left_bound = game.width;
            this.right_bound = 0;
            this.top_bound = game.height;
            this.bottom_bound = 0;
            this.best_mat = matrice;
            this.mat_player = matrice_player;
            this.groupCells = game.add.group();
            this.scale_moins = -.2;
            this.create_grid();
            play.groupCells.x = -game.width * 2;
            game.add.tween(play.groupCells).to({
                x: 0
            }, 300, Phaser.Easing.Quadratic.Out, false, 700).start();
            this.group_hud.y = -game.height;
            game.add.tween(play.group_hud).to({
                y: 0
            }, 300, Phaser.Easing.Quadratic.Out, false, 500).start();
            game.input.onUp.add(this.deplacer, this);
            this.createMenuWord();
            this.witch_girl = game.add.sprite(game.width + 270 * resolution, 422 * resolution, "witch_happy");
            this.witch_girl.anchor.setTo(.5, .5);
            this.witch_girl.animations.add("happy", [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29]).onComplete.add(function() {
                this.witch_girl.animations.play("happy", 40, false, false).onComplete.add(function() {
                    this.witch_girl.animations.play("idle", 33, true, false)
                }, this)
            }, this);
            this.witch_girl.loadTexture("witch_sad");
            this.witch_girl.animations.add("sad", [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29]).onComplete.add(function() {
                this.witch_girl.animations.play("idle", 33, true, false)
            }, this);
            this.witch_girl.loadTexture("witch_idle");
            this.witch_girl.animations.add("idle", [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29]);
            this.witch_girl.animations.play("idle", 33, true, false);
            game.add.tween(play.witch_girl).to({
                x: 270 * resolution
            }, 300, Phaser.Easing.Quadratic.Out, false, 900).start().onComplete.add(this.init_tuto, this);
            this.bg_noire = game.add.image(0, 0, "bgnoire");
            this.bg_noire.alpha = .7;
            this.bg_noire.visible = false;
            this.bg_noire.alive = true;
            this.createPause()
        }, this)
    },
    initAtributs: function() {
        this.stateMusic = Music.enableMisic;
        this.timerEndLevel = null;
        this.timerEndLevelAndLose = null;
        this.istimerEndLevel = false;
        this.istimerEndLevelAndLose = false;
        this.gameOver = false;
        this.you_win = false;
        this.pausePlay = false;
        this.isEndAllLevels = false
    },
    createButtonsPlay: function() {
        this.group_hud = game.add.group();
        var hud = game.add.sprite(game.width / 2 + 2 * resolution, 27 * resolution, "sprites2", "Hud" + resolution + ".png");
        hud.anchor.setTo(.5, .5);
        this.group_hud.add(hud);
        this.bnt_pause = new Bouton(this.game,0,0,"sprites2",this.funcPause,this);
        this.bnt_pause.frameName = "pausebnt" + resolution + ".png";
        this.bnt_pause.x = 27 * resolution;
        this.bnt_pause.y = 27 * resolution;
        this.group_hud.add(this.bnt_pause)
    },
    game_over: function() {
        if (Music.enableMisic)
            Music.sounds.play("whoosh");
        this.gameOver = true;
        this.bnt_pause.visible = false;
        this.bg_noire.visible = true;
        this.bgPause.frameName = "bgLose" + resolution + ".png";
        this.bgPause.x = game.width / 2;
        this.groupPause.forEachAlive(function(obj) {
            obj.visible = true
        }, this);
        this.resumebtn.visible = false;
        this.menubntt.x = 125 * resolution;
        this.bnt_replay.x = this.menubntt.x + 75 * resolution;
        this.bnt_replay.y = this.menubntt.y = 350 * resolution;
        this.textPause.setText(text.txtgameover);
        this.textPause.updateText();
        this.textPause.x = 100 * resolution;
        this.textPause.y = 225 * resolution;
        this.textPauseLevel.x = 104 * resolution;
        this.textPauseLevel.y = 202.5 * resolution;
        this.groupPause.y = 400 * resolution;
        game.world.bringToTop(this.bg_noire);
        game.world.bringToTop(this.groupPause);
        this.groupPause.setAll("alpha", 0);
        game.add.tween(this.groupPause).to({
            y: -50 * resolution
        }, 350, Phaser.Easing.Quadratic.Out, true, 100).to({
            y: -35 * resolution
        }, 200, Phaser.Easing.Quadratic.Out, true, 70);
        game.world.bringToTop(this.bg_noire);
        game.world.bringToTop(this.groupPause);
        this.groupPause.forEach(function(obj) {
            game.add.tween(obj).to({
                alpha: 1
            }, 600, Phaser.Easing.Quadratic.Out, true, 150)
        }, this)
    },
    createPause: function() {
        this.bgPause = new Phaser.Sprite(this.game,game.width / 2,0,"sprites2");
        this.bgPause.frameName = "bgPause" + resolution + ".png";
        this.bgPause.y = game.height / 2;
        this.bgPause.anchor.setTo(.5, .5);
        this.bgPause.alive = true;
        this.resumebtn = new Bouton(this.game,this.bgPause.x,this.bgPause.y + 90 * resolution,"sprites2",this.funcResume,this);
        this.resumebtn.frameName = "resumebnt" + resolution + ".png";
        this.resumebtn.alive = true;
        this.menubntt = new Bouton(this.game,this.resumebtn.x - 58 * resolution,this.bgPause.y + 90 * resolution,"sprites2",this.funcBack,this);
        this.menubntt.frameName = "levelsbnt" + resolution + ".png";
        this.menubntt.alive = true;
        this.bnt_replay = new Bouton(this.game,this.resumebtn.x + 58 * resolution,this.bgPause.y + 90 * resolution,"sprites2",this.funReplay,this);
        this.bnt_replay.frameName = "replaybnt" + resolution + ".png";
        this.bnt_replay.alive = true;
        this.groupPause = this.game.add.group();
        this.groupPause.add(this.bgPause);
        this.groupPause.add(this.resumebtn);
        this.groupPause.add(this.menubntt);
        this.groupPause.add(this.bnt_replay);
        this.textPause = new Phaser.Text(game,90 * resolution,this.bgPause.y + 3 * resolution,text.txtPause,{
            font: 22.5 * resolution + langFont2,
            align: "center",
            fill: "#ffffff",
            stroke: "#da4e0b",
            strokeThickness: 2.5 * resolution
        });
        this.textPause.alive = true;
        this.textPause.align = "center";
        this.textPause.x = game.width / 2 - this.textPause.width / 2;
        this.textPauseLevel = new Phaser.Text(game,135 * resolution,this.bgPause.y + 25 * resolution,text.txtlevel + " " + play.numLevel,{
            font: 18 * resolution + langFont2,
            align: "center",
            fill: "#ffffff",
            stroke: "#975e2b",
            strokeThickness: 2 * resolution
        });
        this.textPauseLevel.alive = true;
        this.textPauseLevel.x = game.width / 2 - this.textPauseLevel.width / 2;
        this.textPauseTarget = new Phaser.Text(game,150 * resolution,this.bgPause.y + 32 * resolution,text.txttarget + "" + this.nbr_hints,{
            font: 18 * resolution + langFont2,
            align: "center",
            fill: "#ffffff",
            stroke: "#da4e0b",
            strokeThickness: 2 * resolution
        });
        this.textPauseTarget.alive = true;
        this.textPauseTarget.x = game.width / 2 - this.textPauseTarget.width / 2;
        this.groupPause.add(this.textPause);
        this.groupPause.add(this.textPauseTarget);
        this.groupPause.forEachAlive(function(obj) {
            obj.visible = false
        }, this);
        this.groupPause.y = 400 * resolution
    },
    createCongratulations: function() {
        this.isEndAllLevels = true;
        this.numLevel = nombre_levels;
        level = sauvegarde.length - 1;
        Save_setItem("WitchCrossward_level", sauvegarde.length - 1);
        this.game.add.image(0, 0, "bgnoire").alpha = .7;
        var bg = this.game.add.image(game.width / 2, game.height / 2, "sprites2");
        bg.anchor.setTo(.5, .5);
        bg.frameName = "bgPause" + resolution + ".png";
        var b = new Bouton(this.game,game.width / 2,bg.y + 140 * resolution,"sprites2",function() {
            play.InitialiseFade("menu")
        }
        ,this);
        b.frameName = "resumebnt" + resolution + ".png";
        var tt2 = new Phaser.Text(game,0,bg.y + 3 * resolution,text.textCongratulations2,{
            font: 21 * resolution + langFont2,
            align: "center",
            fill: "#ffffff",
            stroke: "#da4e0b",
            strokeThickness: 2.5 * resolution
        });
        tt2.x = game.width / 2 - tt2.width / 2;
        tt2.align = "center";
        this.world.add(tt2);
        this.world.add(b)
    },
    createNextLevel: function() {
        if (Music.enableMisic)
            Music.sounds.play("whoosh");
        game.time.events.add(600, function() {
            if (Music.enableMisic)
                Music.sounds.play("win")
        }, this);
        this.gameOver = true;
        this.bgPause.frameName = "bgWin" + resolution + ".png";
        this.bgPause.x = game.width / 2;
        this.bnt_pause.visible = false;
        this.next_level = new Bouton(this.game,this.bgPause.x,this.bgPause.y + 90 * resolution,"sprites2",this.funcnextlevel,this);
        this.next_level.frameName = "resumebnt" + resolution + ".png";
        this.next_level.alive = true;
        this.bg_noire.visible = true;
        this.groupNexLevel = this.game.add.group();
        this.next_level.x = this.resumebtn.x;
        this.next_level.y = this.resumebtn.y;
        var bg_effect = new Phaser.Sprite(this.game,game.width / 2,0,"sprites2","decoration_win" + resolution + ".png");
        bg_effect.anchor.setTo(.5, 1);
        bg_effect.y -= bg_effect.height / 2;
        bg_effect.scale.setTo(0, 0);
        var etoile1 = new Phaser.Sprite(this.game,-360 * resolution,50 * resolution,"sprites2");
        etoile1.frameName = "star" + resolution + ".png";
        etoile1.real_position = {
            x: 94 * resolution,
            y: 134.5 * resolution
        };
        etoile1.alive = true;
        etoile1.angle = -16;
        etoile1.anchor.setTo(.5, .5);
        etoile1.scale.setTo(.88, .88);
        var etoile2 = new Phaser.Sprite(this.game,-360 * resolution,50 * resolution,"sprites2");
        etoile2.frameName = "star" + resolution + ".png";
        etoile2.real_position = {
            x: game.width / 2 - 4.5 * resolution,
            y: 117.5 * resolution
        };
        etoile2.anchor.setTo(.5, .5);
        etoile2.alive = true;
        var etoile3 = new Phaser.Sprite(this.game,-360 * resolution,50 * resolution,"sprites2");
        etoile3.frameName = "star" + resolution + ".png";
        etoile3.real_position = {
            x: 217.5 * resolution,
            y: 134 * resolution
        };
        etoile3.alive = true;
        etoile3.angle = 23;
        etoile3.anchor.setTo(.5, .5);
        etoile3.scale.setTo(.88, .88);
        this.menubntt.y = this.bnt_replay.y = this.next_level.y;
        this.world.add(bg_effect);
        this.groupNexLevel.add(this.bgPause);
        this.groupNexLevel.add(this.next_level);
        this.groupNexLevel.add(this.menubntt);
        this.groupNexLevel.add(this.bnt_replay);
        this.groupNexLevel.add(etoile1);
        this.groupNexLevel.add(etoile2);
        this.groupNexLevel.add(etoile3);
        if (this.number_etoiles == 1) {
            game.add.tween(etoile2).to({
                x: etoile2.real_position.x,
                y: etoile2.real_position.y
            }, 1e3, Phaser.Easing.Back.Out, true, 120)
        } else if (this.number_etoiles > 1) {
            game.add.tween(etoile1).to({
                x: etoile1.real_position.x,
                y: etoile1.real_position.y
            }, 1e3, Phaser.Easing.Back.Out, true, 120)
        }
        if (this.number_etoiles >= 2) {
            game.add.tween(etoile2).to({
                x: etoile2.real_position.x,
                y: etoile2.real_position.y
            }, 1e3, Phaser.Easing.Back.Out, true, 240)
        }
        if (this.number_etoiles >= 3) {
            game.add.tween(etoile3).to({
                x: etoile3.real_position.x,
                y: etoile3.real_position.y
            }, 1e3, Phaser.Easing.Back.Out, true, 360)
        }
        this.textPauseTarget.setText(text.txttarget + this.nbr_hints);
        this.textPauseTarget.x = game.width / 2 - this.textPauseTarget.width / 2 + 4 * resolution;
        this.textPauseTarget.y -= 20 * resolution;
        this.groupNexLevel.add(this.textPauseTarget);
        var tt = new Phaser.Text(game,82 * resolution,this.bgPause.y - 70 * resolution,text.youwin,{
            font: 22.5 * resolution + langFont2,
            align: "center",
            fill: "#ffffff",
            stroke: "#da4e0b",
            strokeThickness: 2.5 * resolution
        });
        tt.x = game.width / 2 - tt.width / 2;
        tt.align = "center";
        tt.alive = true;
        this.groupNexLevel.add(tt);
        this.groupNexLevel.y = 400 * resolution;
        this.groupNexLevel.forEach(function(obj) {
            if (obj != this.etoilEnd1 && obj != this.etoilEnd2 && obj != this.etoilEnd3)
                obj.alpha = 0
        }, this);
        game.add.tween(bg_effect.scale).to({
            x: 1.15,
            y: 1.15
        }, 450, Phaser.Easing.Elastic.Out, false, 1e3).start();
        game.add.tween(this.groupNexLevel).to({
            y: -75 * resolution
        }, 350, Phaser.Easing.Quadratic.Out, true, 100).to({
            y: -60 * resolution
        }, 200, Phaser.Easing.Quadratic.Out, true, 70);
        game.world.bringToTop(this.bg_noire);
        game.world.bringToTop(bg_effect);
        game.world.bringToTop(this.groupNexLevel);
        this.groupNexLevel.forEach(function(obj) {
            game.add.tween(obj).to({
                alpha: 1
            }, 600, Phaser.Easing.Quadratic.Out, true, 150)
        }, this);
        this.groupNexLevel.forEachAlive(function(obj) {
            obj.visible = true
        }, this);
        GameOver()
    },
    funcnextlevel: function() {
        if (this.numLevel <= nombre_levels) {
            this.numLevel++
        }
        if (play.numLevel <= nombre_levels)
            play.InitialiseFade("levels");
        else
            play.InitialiseFade("play")
    },
    cacherPause: function() {
        this.bnt_pause.visible = false;
        this.groupPause.forEachAlive(function(obj) {
            obj.visible = true
        }, this);
        this.bg_noire.visible = true
    },
    funcPause: function() {
        if (this.istimerEndLevel || this.istimerEndLevelAndLose || this.objectives_finished)
            return;
        if (Music.enableMisic)
            Music.sounds.play("whoosh");
        if (this.stateMusic) {
            Music.enableMisic = false;
            Music.music.pause()
        }
        this.cacherPause();
        this.pausePlay = true;
        this.groupPause.setAll("alpha", 0);
        game.add.tween(this.groupPause).to({
            y: -50 * resolution
        }, 350, Phaser.Easing.Quadratic.Out, true, 100).to({
            y: -35 * resolution
        }, 200, Phaser.Easing.Quadratic.Out, true, 70);
        game.world.bringToTop(this.bg_noire);
        game.world.bringToTop(this.groupPause);
        this.groupPause.forEach(function(obj) {
            game.add.tween(obj).to({
                alpha: 1
            }, 600, Phaser.Easing.Quadratic.Out, true, 150)
        }, this);
        game.input.onUp.active = false
    },
    funcResume: function() {
        if (this.stateMusic) {
            Music.enableMisic = true;
            Music.music.resume()
        }
        this.afficherPause();
        this.pausePlay = false;
        game.time.events.add(300, function() {
            if (Music.enableMisic)
                Music.sounds.play("whoosh")
        }, this);
        game.add.tween(this.groupPause).to({
            y: -50 * resolution
        }, 350, Phaser.Easing.Quadratic.Out, true, 100).to({
            y: 400 * resolution
        }, 300, Phaser.Easing.Quadratic.Out, true).onComplete.add(function() {
            this.bg_noire.visible = false
        }, this);
        this.groupPause.forEach(function(obj) {
            game.add.tween(obj).to({
                alpha: 0
            }, 600, Phaser.Easing.Quadratic.Out, true, 400)
        }, this);
        game.input.onUp.active = true
    },
    afficherPause: function() {
        this.bnt_pause.visible = true
    },
    funReplay: function() {
        if (this.stateMusic && this.pausePlay) {
            Music.enableMisic = true;
            Music.music.resume()
        }
        sauvegarde[play.numLevel - 1].time = play.bonus_time;
        save_ecrit();
        play.InitialiseFade("play")
    },
    funcBack: function() {
        if (this.stateMusic) {
            Music.enableMisic = true;
            Music.music.resume()
        }
        play.InitialiseFade("levels");
        sauvegarde[play.numLevel - 1].time = play.bonus_time;
        save_ecrit()
    },
    calculer_etoiles: function() {},
    Fin_level: function(showNextLevel) {
        play.calculer_etoiles();
        if (play.number_etoiles > sauvegarde[play.numLevel - 1].numetoile) {
            sauvegarde[play.numLevel - 1].numetoile = play.number_etoiles
        }
        sauvegarde[play.numLevel - 1].time = 0;
        save_ecrit();
        if (showNextLevel)
            play.createNextLevel()
    },
    update: function() {
        if (play.container_notification != null && play.container_notification.alive)
            return;
        if (this.you_win && this.groupNexLevel.y > 0) {
            this.groupNexLevel.y -= 15
        }
        if (this.gameOver || this.you_win || this.pausePlay)
            return;
        if (this.isEndAllLevels)
            return;
        if (this.istimerEndLevel && this.timerEndLevel != null) {
            this.timerEndLevel -= this.game.time.elapsed;
            if (this.timerEndLevel < 0) {
                this.istimerEndLevel = false;
                game.add.tween(play.witch_girl).to({
                    x: -game.width * 2
                }, 800, Phaser.Easing.Back.In, false, 500).start().onComplete.add(function() {
                    this.Fin_level(true);
                    play.witch_girl.loadTexture("witch_veryhappy");
                    play.witch_girl.scale.x = -1;
                    play.witch_girl.animations.add("veryhappy", [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19]);
                    play.witch_girl.animations.play("veryhappy", 40, true, false);
                    play.witch_girl.bringToTop();
                    game.add.tween(play.witch_girl).to({
                        x: 150 * resolution,
                        y: 380 * resolution
                    }, 700, Phaser.Easing.Quadratic.Out).start()
                }, this)
            }
        }
        if (this.istimerEndLevelAndLose && this.timerEndLevelAndLose != null) {
            this.timerEndLevelAndLose -= this.game.time.elapsed;
            if (this.timerEndLevelAndLose < 0) {
                this.game_over();
                this.istimerEndLevelAndLose = false
            }
        }
        if (this.cell_selected != null && game.input.activePointer.isDown) {}
        this.Time_Update()
    },
    Activate_Input_Down: function(sprite, bool) {
        if (sprite.events.onInputDown != null)
            sprite.events.onInputDown.active = bool
    },
    Activate_Input_Up: function(sprite, bool) {
        if (sprite.events.onInputUp != null)
            sprite.events.onInputUp.active = bool
    },
    Activate_Input_Over: function(sprite, bool) {
        if (sprite.events.onInputOver != null)
            sprite.events.onInputOver.active = bool
    },
    creer_text_score: function(sprite, txt_score, txtsize) {
        if (sprite.txt_created != null) {
            if (sprite.score == 0 || sprite.txt_created || txt_score == 0)
                return;
            sprite.txt_created = true;
            var txt_score_sp = game.add.text(sprite.x, sprite.y - 10 * resolution, "" + txt_score, {
                font: txtsize + langFont2,
                align: "center",
                fill: "#ffffff",
                stroke: "#000000",
                strokeThickness: 2.5 * resolution
            })
        } else {
            var txt_score_sp = game.add.text(sprite.x, sprite.y - 10 * resolution, "" + txt_score, {
                font: txtsize + langFont2,
                align: "center",
                fill: "#ffffff",
                stroke: "#000000",
                strokeThickness: 2.5 * resolution
            })
        }
        txt_score_sp.align = "center";
        txt_score_sp.x -= txt_score_sp.width / 2;
        if (txt_score.y >= game.height / 2)
            txt_score.y -= txt_score.width / 2;
        else
            txt_score.y += txt_score.textHeight / 2;
        if (txt_score_sp.x - txt_score_sp.width / 2 <= 0)
            txt_score_sp.x += txt_score_sp.width / 2;
        else if (txt_score_sp.x + txt_score_sp.width / 2 >= game.width)
            txt_score_sp.x -= txt_score_sp.width / 2;
        txt_score_sp.initY = txt_score_sp.y;
        txt_score_sp.scale.setTo(.1, .1);
        this.game.add.tween(txt_score_sp.scale).to({
            x: 1.6,
            y: 1.4
        }, 200, Phaser.Easing.Quadratic.Out, true, 100).to({
            x: 1.2,
            y: 1.2
        }, 1e3, Phaser.Easing.Elastic.Out, true);
        game.add.tween(txt_score_sp).to({
            y: txt_score_sp.initY - 10 * resolution,
            alpha: 0
        }, 600, Phaser.Easing.Linear.None, true, 700).onComplete.add(function() {
            this.visible = false;
            this.destroy()
        }, txt_score_sp)
    },
    InitialiseFade: function(state) {
        if (play.bgnoire == null)
            play.bgnoire = game.add.image(0, 0, "bgnoire");
        play.bgnoire.alpha = 0;
        game.add.tween(play.bgnoire).to({
            alpha: 1
        }, 500, Phaser.Easing.Linear.None, true).onComplete.add(function() {
            game.time.events.add(100, function() {
                game.state.start(this, true);
                play.bgnoire.alpha = 0;
                play.bgnoire.kill();
                play.bgnoire = null
            }, this)
        }, state)
    },
    create_grid: function() {
        this.left_bound = game.width;
        this.right_bound = 0;
        this.top_bound = game.height;
        this.bottom_bound = 0;
        this.mat_sprites = [];
        for (var ii = 0; ii < this.rows; ii++) {
            this.mat_sprites[ii] = [];
            for (var jj = 0; jj < this.cols; jj++) {
                this.mat_sprites[ii][jj] = {
                    bg_cell: null,
                    txt_letter: null,
                    bg_cover: null
                }
            }
        }
        for (var i = 0; i < this.cols; i++) {
            for (var j = 0; j < this.rows; j++) {
                if (this.best_mat[i][j] != "") {
                    this.mat_sprites[i][j].ind_i = i;
                    this.mat_sprites[i][j].ind_j = j;
                    this.mat_sprites[i][j].direction_vertical = 0;
                    this.mat_sprites[i][j].bg_cell = game.add.image(j * this.taille, i * this.taille, "squares", 0);
                    this.mat_sprites[i][j].bg_cell.scale.setTo(1 - this.scale_moins, 1 - this.scale_moins);
                    this.mat_sprites[i][j].bg_cell.x -= this.taille * j * this.scale_moins;
                    this.mat_sprites[i][j].bg_cell.y -= this.taille * i * this.scale_moins;
                    this.mat_sprites[i][j].bg_cell.alive = true;
                    this.mat_sprites[i][j].bg_cell.inputEnabled = true;
                    this.mat_sprites[i][j].bg_cell.events.onInputDown.add(this.TapDown, this.mat_sprites[i][j]);
                    if (this.left_bound > this.mat_sprites[i][j].bg_cell.x)
                        this.left_bound = this.mat_sprites[i][j].bg_cell.x;
                    if (this.right_bound < this.mat_sprites[i][j].bg_cell.x)
                        this.right_bound = this.mat_sprites[i][j].bg_cell.x;
                    if (this.top_bound > this.mat_sprites[i][j].bg_cell.y)
                        this.top_bound = this.mat_sprites[i][j].bg_cell.y;
                    if (this.bottom_bound < this.mat_sprites[i][j].bg_cell.y)
                        this.bottom_bound = this.mat_sprites[i][j].bg_cell.y;
                    this.mat_sprites[i][j].txt_letter = game.add.text(j * this.taille + 5 * resolution, i * this.taille + 3 * resolution, this.best_mat[i][j].toUpperCase(), {
                        font: 12 * resolution - 12 * resolution * this.scale_moins + langFont,
                        align: "center",
                        fill: "#d82d32"
                    });
                    this.mat_sprites[i][j].txt_letter.alive = true;
                    this.mat_sprites[i][j].txt_letter.x = this.mat_sprites[i][j].bg_cell.x + this.mat_sprites[i][j].bg_cell.width / 2 - this.mat_sprites[i][j].txt_letter.width / 2;
                    this.mat_sprites[i][j].txt_letter.y = this.mat_sprites[i][j].bg_cell.y + this.mat_sprites[i][j].bg_cell.height / 2 - this.mat_sprites[i][j].txt_letter.height / 2;
                    this.nbr_letters_level++;
                    if (this.mat_player[i][j] == "*")
                        this.mat_sprites[i][j].txt_letter.visible = false;
                    else
                        this.nbr_letters_found++;
                    this.groupCells.add(this.mat_sprites[i][j].bg_cell);
                    this.groupCells.add(this.mat_sprites[i][j].txt_letter)
                }
            }
        }
        for (var i = 0; i < this.cols; i++) {
            for (var j = 0; j < this.rows; j++) {
                if (this.best_mat[i][j] != "") {
                    this.mat_sprites[i][j].bg_cell.x += game.width / 2 - this.left_bound - (this.right_bound - this.left_bound) / 2 - this.mat_sprites[i][j].bg_cell.width / 2;
                    this.mat_sprites[i][j].bg_cell.y += game.height / 2 - this.top_bound - (this.bottom_bound - this.top_bound) / 2 - 20 * resolution;
                    this.mat_sprites[i][j].txt_letter.x = this.mat_sprites[i][j].bg_cell.x + this.mat_sprites[i][j].bg_cell.width / 2 - this.mat_sprites[i][j].txt_letter.width / 2 - .5 * resolution;
                    this.mat_sprites[i][j].txt_letter.y = this.mat_sprites[i][j].bg_cell.y + this.mat_sprites[i][j].bg_cell.height / 2 - this.mat_sprites[i][j].txt_letter.height / 2 - 2 * resolution;
                    if (this.mat_sprites[i][j].bg_cell.x + this.mat_sprites[i][j].bg_cell.width / 2 >= game.width - 3 * resolution || this.mat_sprites[i][j].bg_cell.x - this.mat_sprites[i][j].bg_cell.width / 2 <= 0 || this.mat_sprites[i][j].bg_cell.y - this.mat_sprites[i][j].bg_cell.height / 2 <= 50 * resolution) {
                        this.scale_moins += .05;
                        for (var ii = 0; ii < this.cols; ii++) {
                            for (var jj = 0; jj < this.rows; jj++) {
                                if (this.mat_sprites[ii][jj]) {
                                    if (this.mat_sprites[ii][jj].bg_cell)
                                        this.mat_sprites[ii][jj].bg_cell.destroy();
                                    if (this.mat_sprites[ii][jj].txt_letter)
                                        this.mat_sprites[ii][jj].txt_letter.destroy()
                                }
                            }
                        }
                        this.create_grid();
                        return
                    }
                }
            }
        }
    },
    TapDown: function() {
        play.cell_selected = this;
        play.cell_selected.first_i = -1;
        play.cell_selected.last_i = -1;
        play.cell_selected.first_j = -1;
        play.cell_selected.last_j = -1;
        play.time_debut_swip = game.time.now;
        play.debut_swip.x = game.input.activePointer.x;
        play.debut_swip.y = game.input.activePointer.y
    },
    deplacer: function() {
        if (play.numLevel == 1 && play.tuto && play.tuto.text == text.txttuto2) {
            play.tuto.setText(text.txttuto3);
            play.tuto.x = play.bg_tuto.x + play.bg_tuto.width / 2 - play.tuto.width / 2 - 5 * resolution;
            play.tuto.y = play.bg_tuto.y + play.bg_tuto.height / 2 - play.tuto.height / 2 - 3 * resolution
        } else if (play.numLevel == 1 && play.tuto && play.tuto.text == text.txttuto3) {
            game.add.tween(play.witch_girl).to({
                x: 45 * resolution,
                y: 100 * resolution
            }, 250, Phaser.Easing.Quadratic.Out, false, 150).start();
            play.bg_tuto_noir.destroy();
            play.bg_tuto.destroy();
            play.tuto.destroy();
            play.tuto = null
        }
        if (this.gameOver || this.pausePlay || !this.cell_selected || this.info_selected.word.length > 0)
            return;
        if (game.time.elapsedSince(this.time_debut_swip) >= 100 && game.time.elapsedSince(this.time_debut_swip) < 2500) {
            var dx = game.input.activePointer.x - this.debut_swip.x;
            var dy = game.input.activePointer.y - this.debut_swip.y;
            var dist = Math.sqrt(dx * dx + dy * dy);
            if (dist >= 20 * resolution) {
                var direction = 1;
                var anglevect = Phaser.Math.angleBetween(this.debut_swip.x, this.debut_swip.y, game.input.activePointer.x, game.input.activePointer.y);
                anglevect = anglevect * 180 / Math.PI;
                if (anglevect < 0)
                    anglevect += 360;
                if (anglevect <= 45 || anglevect > 315) {
                    this.cell_selected.direction_vertical = 0;
                    if (dx >= 0)
                        direction = 1;
                    else
                        direction = -1;
                    this.select_word_horizontal(this.cell_selected, direction)
                } else if (anglevect <= 225 && anglevect > 135) {
                    this.cell_selected.direction_vertical = 0;
                    if (dx >= 0)
                        direction = 1;
                    else
                        direction = -1;
                    this.select_word_horizontal(this.cell_selected, direction)
                } else if (anglevect <= 315 && anglevect > 225) {
                    this.cell_selected.direction_vertical = 1;
                    if (dy >= 0)
                        direction = 1;
                    else
                        direction = -1;
                    this.select_word_vertical(this.cell_selected, direction)
                } else if (anglevect <= 135 && anglevect > 45) {
                    this.cell_selected.direction_vertical = 1;
                    if (dy >= 0)
                        direction = 1;
                    else
                        direction = -1;
                    this.select_word_vertical(this.cell_selected, direction)
                }
            }
        }
    },
    select_word_horizontal: function(cell, direction) {
        var nbr_cells_selected = 0;
        var first_j = 0;
        var last_j = 0;
        if (cell.ind_j > 0) {
            for (var j = cell.ind_j; j >= 0; j--) {
                if (this.mat_sprites[cell.ind_i][j].bg_cell) {
                    nbr_cells_selected++
                } else {
                    first_j = j + 1;
                    break
                }
            }
        }
        if (cell.ind_j < play.rows) {
            for (var jj = cell.ind_j; jj < play.rows; jj++) {
                if (this.mat_sprites[cell.ind_i][jj].bg_cell) {
                    nbr_cells_selected++
                } else {
                    last_j = jj - 1;
                    break
                }
            }
        }
        if (nbr_cells_selected >= 3) {
            var delay_coloring = 1;
            for (var x = first_j; x <= last_j; x++) {
                if (this.mat_sprites[cell.ind_i][x].bg_cell) {
                    play.info_selected.word += this.mat_sprites[cell.ind_i][x].txt_letter.text;
                    if (this.mat_sprites[cell.ind_i][x].txt_letter.visible)
                        this.info_selected.visible_letters += this.mat_sprites[cell.ind_i][x].txt_letter.text;
                    else
                        this.info_selected.visible_letters += "*"
                }
            }
            if (direction == 1) {
                for (var x = first_j; x <= last_j; x++) {
                    if (this.mat_sprites[cell.ind_i][x].bg_cell) {
                        game.time.events.add(delay_coloring, function() {
                            this.bg_cell.frame = 1;
                            game.time.events.add(500, function() {
                                this.bg_cell.frame = 0
                            }, this)
                        }, this.mat_sprites[cell.ind_i][x]);
                        delay_coloring += 50
                    }
                }
            } else {
                for (var x = last_j; x >= first_j; x--) {
                    if (this.mat_sprites[cell.ind_i][x].bg_cell) {
                        game.time.events.add(delay_coloring, function() {
                            this.bg_cell.frame = 1;
                            game.time.events.add(500, function() {
                                this.bg_cell.frame = 0
                            }, this)
                        }, this.mat_sprites[cell.ind_i][x]);
                        delay_coloring += 50
                    }
                }
            }
            play.cell_selected.first_j = first_j;
            play.cell_selected.last_j = last_j;
            this.Get_info_selected()
        }
    },
    select_word_vertical: function(cell, direction) {
        var nbr_cells_selected = 0;
        var first_i = 0;
        var last_i = 0;
        if (cell.ind_i > 0) {
            for (var i = cell.ind_i; i >= 0; i--) {
                if (this.mat_sprites[i][cell.ind_j].bg_cell) {
                    nbr_cells_selected++
                } else {
                    first_i = i + 1;
                    break
                }
            }
        }
        if (cell.ind_i < play.cols) {
            for (var ii = cell.ind_i; ii < play.cols; ii++) {
                if (this.mat_sprites[ii][cell.ind_j].bg_cell) {
                    nbr_cells_selected++
                } else {
                    last_i = ii - 1;
                    break
                }
            }
        }
        if (nbr_cells_selected >= 3) {
            var delay_coloring = 1;
            for (var y = first_i; y <= last_i; y++) {
                if (this.mat_sprites[y][cell.ind_j].bg_cell) {
                    play.info_selected.word += this.mat_sprites[y][cell.ind_j].txt_letter.text;
                    if (this.mat_sprites[y][cell.ind_j].txt_letter.visible)
                        this.info_selected.visible_letters += this.mat_sprites[y][cell.ind_j].txt_letter.text;
                    else
                        this.info_selected.visible_letters += "*"
                }
            }
            if (direction == 1) {
                for (var y = first_i; y <= last_i; y++) {
                    if (this.mat_sprites[y][cell.ind_j].bg_cell) {
                        game.time.events.add(delay_coloring, function() {
                            this.bg_cell.frame = 1;
                            game.time.events.add(500, function() {
                                this.bg_cell.frame = 0
                            }, this)
                        }, this.mat_sprites[y][cell.ind_j]);
                        delay_coloring += 50
                    }
                }
            } else {
                for (var y = last_i; y >= first_i; y--) {
                    if (this.mat_sprites[y][cell.ind_j].bg_cell) {
                        game.time.events.add(delay_coloring, function() {
                            this.bg_cell.frame = 1;
                            game.time.events.add(500, function() {
                                this.bg_cell.frame = 0
                            }, this)
                        }, this.mat_sprites[y][cell.ind_j]);
                        delay_coloring += 50
                    }
                }
            }
            play.cell_selected.first_i = first_i;
            play.cell_selected.last_i = last_i;
            this.Get_info_selected()
        }
    },
    Get_info_selected: function() {
        if (this.info_selected.word.length <= 0)
            return;
        for (var i = 0; i < words.length; i++) {
            if (words[i].response.toUpperCase() == this.info_selected.word) {
                this.info_selected.category = words[i].category;
                this.info_selected.question = words[i].question;
                this.info_selected.choices = words[i].choices;
                this.info_selected.ind = i
            }
        }
        game.time.events.add(500, this.ShowMenuWord, this)
    },
    createMenuWord: function() {
        this.groupMenuWord = game.add.group();
        this.bg_question = game.add.sprite(game.width / 2, 180 * resolution, "sprites2", "bg_question" + resolution + ".png");
        this.bg_question.anchor.setTo(.5, .5);
        this.bg_category = game.add.sprite(game.width / 2 - 35 * resolution, this.bg_question.y - this.bg_question.height / 2 + 15 * resolution, "sprites2", "bg_category" + resolution + ".png");
        this.bg_category.anchor.setTo(.5, .5);
        this.txt_category = game.add.text(0, 0, "category", {
            font: 17 * resolution + langFont,
            align: "center",
            fill: "#a46859",
            stroke: "#000000",
            strokeThickness: 0
        });
        this.txt_category.x = this.bg_category.x - this.txt_category.width / 2;
        this.txt_category.y = this.bg_category.y - this.txt_category.height / 2;
        this.txt_question = game.add.text(0, 0, "question", {
            font: 18 * resolution + langFont,
            align: "center",
            fill: "#ffffff",
            stroke: "#000000",
            strokeThickness: 2.5 * resolution,
            wordWrap: true,
            wordWrapWidth: 253 * resolution
        });
        this.txt_question.x = this.bg_question.x - this.txt_question.width / 2;
        this.txt_question.y = this.bg_question.y - this.txt_question.height / 2 + 20 * resolution;
        this.img_question = game.add.sprite(this.bg_question.x, this.bg_question.y + 5 * resolution, "images", 0);
        this.img_question.anchor.setTo(.5, .5);
        this.img_question.kill();
        this.bnt_exit = new Bouton(game,295 * resolution,90 * resolution,"sprites2",this.CloseMenuWord,this);
        this.bnt_exit.frameName = "exit_bnt" + resolution + ".png";
        this.bnt_show = new Bouton(game,96 * resolution,305 * resolution,"sprites2",this.ShowLetter,this);
        this.bnt_show.frameName = "bnt_show" + resolution + ".png";
        this.bnt_delete = new Bouton(game,226 * resolution,305 * resolution,"sprites2",this.DeleteLetter,this);
        this.bnt_delete.frameName = "bnt_delete" + resolution + ".png";
        this.groupMenuWord.add(this.bg_question);
        this.groupMenuWord.add(this.bg_category);
        this.groupMenuWord.add(this.txt_category);
        this.groupMenuWord.add(this.txt_question);
        this.groupMenuWord.add(this.img_question);
        this.groupMenuWord.add(this.bnt_exit);
        this.groupMenuWord.add(this.bnt_show);
        this.groupMenuWord.add(this.bnt_delete);
        for (var i = 0; i < 2; i++) {
            for (var j = 0; j < 7; j++) {
                var cell_letter = game.add.sprite(0, 0, "container_letter", 0);
                cell_letter.x = 33 * resolution + j * (cell_letter.width + 5 * resolution);
                cell_letter.y = 400 * resolution + i * (cell_letter.height + 5 * resolution);
                cell_letter.anchor.setTo(.5, .5);
                cell_letter.ind = -1;
                var letter = game.add.text(cell_letter.x, cell_letter.y, "", {
                    font: 22 * resolution + langFont,
                    align: "center",
                    fill: "#d82d32"
                });
                letter.x = cell_letter.x - letter.width / 2 - 2 * resolution;
                letter.y = cell_letter.y - letter.height / 2 - 8 * resolution;
                letter.visible = false;
                cell_letter.inputEnabled = true;
                cell_letter.events.onInputDown.add(this.InsertLetter, {
                    cell: cell_letter,
                    letter: letter
                });
                this.vect_cell_letters.push({
                    cell: cell_letter,
                    letter: letter
                });
                cell_letter.ind = this.vect_cell_letters.length - 1;
                this.groupMenuWord.add(cell_letter);
                this.groupMenuWord.add(letter)
            }
        }
        this.groupMenuWord.x = game.width * 1.5
    },
    createCellResponse: function(nbr_cells) {
        for (var x = 0; x < nbr_cells; x++) {
            var cell_response = game.add.sprite(0, 350 * resolution, "container_letter", 0);
            cell_response.scale.setTo(.8, .8);
            var beginX = game.width / 2 - nbr_cells * (cell_response.width / 2) + cell_response.width / 2;
            cell_response.x = beginX + x * cell_response.width;
            cell_response.anchor.setTo(.5, .5);
            cell_response.ind = x;
            cell_response.ind_question = -1;
            var letter_response = game.add.text(cell_response.x, cell_response.y, "", {
                font: 18 * resolution + langFont,
                align: "center",
                fill: "#d82d32"
            });
            if (this.info_selected.visible_letters[x] != "*") {
                letter_response.setText(this.info_selected.visible_letters[x]);
                cell_response.frame = 1;
                play.nbr_letters_response++
            } else
                letter_response.visible = false;
            letter_response.x = cell_response.x - letter_response.width / 2 - .5 * resolution;
            letter_response.y = cell_response.y - letter_response.height / 2 - 3.5 * resolution;
            cell_response.inputEnabled = true;
            cell_response.events.onInputDown.add(this.RemoveLetter, {
                cell: cell_response,
                letter: letter_response
            });
            this.vect_cell_response.push({
                cell: cell_response,
                letter: letter_response
            });
            this.groupMenuWord.add(cell_response);
            this.groupMenuWord.add(letter_response)
        }
    },
    InsertLetter: function() {
        if (play.gameOver || play.pausePlay || play.istimerEndLevel || play.istimerEndLevelAndLose || play.tuto)
            return;
        for (var i = 0; i < play.vect_cell_response.length; i++) {
            if (!play.vect_cell_response[i].letter.visible) {
                play.snd_remove++;
                if (play.snd_remove == 1) {
                    if (Music.enableMisic)
                        Music.sounds.play("select_letter")
                } else if (play.snd_remove == 2) {
                    if (Music.enableMisic)
                        Music.sounds.play("select_letter2")
                } else if (play.snd_remove >= 3) {
                    if (Music.enableMisic)
                        Music.sounds.play("select_letter3")
                } else if (play.snd_remove >= 4) {
                    if (Music.enableMisic)
                        Music.sounds.play("select_letter4")
                } else if (play.snd_remove >= 5) {
                    if (Music.enableMisic)
                        Music.sounds.play("select_letter5")
                } else if (play.snd_remove >= 6) {
                    if (Music.enableMisic)
                        Music.sounds.play("select_letter6")
                } else if (play.snd_remove >= 7) {
                    if (Music.enableMisic)
                        Music.sounds.play("select_letter7")
                } else if (play.snd_remove >= 8) {
                    if (Music.enableMisic)
                        Music.sounds.play("select_letter8")
                }
                play.vect_cell_response[i].letter.setText(this.letter.text);
                play.vect_cell_response[i].letter.x = play.vect_cell_response[i].cell.x - play.vect_cell_response[i].letter.width / 2 - .5 * resolution;
                play.vect_cell_response[i].letter.y = play.vect_cell_response[i].cell.y - play.vect_cell_response[i].letter.height / 2 - 3.5 * resolution;
                play.vect_cell_response[i].cell.ind_question = this.cell.ind;
                play.vect_cell_response[i].letter.visible = true;
                this.letter.visible = false;
                this.cell.visible = false;
                play.nbr_letters_response++;
                if (play.nbr_letters_response >= play.vect_cell_response.length)
                    play.CorrectionWord();
                break
            }
        }
    },
    RemoveLetter: function() {
        if (play.gameOver || play.pausePlay || play.istimerEndLevel || play.istimerEndLevelAndLose || play.tuto)
            return;
        if (this.cell.frame != 0 || !this.letter.visible)
            return;
        if (Music.enableMisic)
            Music.sounds.play("remove_letter");
        this.letter.visible = false;
        play.vect_cell_letters[this.cell.ind_question].cell.visible = true;
        play.vect_cell_letters[this.cell.ind_question].letter.visible = true;
        this.cell.ind_question = -1;
        play.nbr_letters_response--;
        if (play.snd_remove > 0)
            play.snd_remove--
    },
    ShowMenuWord: function() {
        if (play.gameOver || play.pausePlay || play.istimerEndLevel || play.istimerEndLevelAndLose)
            return;
        if (this.info_selected.word.length <= 0)
            return;
        if (Music.enableMisic)
            Music.sounds.play("whoosh");
        this.txt_category.setText(this.info_selected.category);
        this.txt_category.x = this.bg_category.x - this.txt_category.width / 2 + 4 * resolution;
        this.txt_category.y = this.bg_category.y - this.txt_category.height / 2 - 2 * resolution;
        if (this.info_selected.category == "Photo") {
            this.txt_question.setText("");
            this.img_question.revive();
            this.img_question.frame = +this.info_selected.question
        } else {
            if (this.img_question.alive)
                this.img_question.kill();
            this.txt_question.setText(this.info_selected.question);
            this.txt_question.x = this.bg_question.x - this.txt_question.width / 2;
            this.txt_question.y = this.bg_question.y - this.txt_question.height / 2 + 5 * resolution
        }
        this.createCellResponse(this.info_selected.word.length);
        var nbr_cell_visible = 0;
        for (var ii = 0; ii < this.vect_cell_response.length; ii++) {
            if (this.vect_cell_response[ii].letter.visible)
                nbr_cell_visible++
        }
        if (nbr_cell_visible < this.vect_cell_response.length) {
            var word_selected = this.info_selected.word + this.info_selected.choices;
            for (var i = 0; i < this.vect_cell_letters.length; i++) {
                var rnd_ind = Math.floor(Math.random() * (word_selected.length - .1));
                if (rnd_ind >= this.info_selected.visible_letters.length || this.info_selected.visible_letters[rnd_ind] == "*") {
                    this.vect_cell_letters[i].letter.setText(word_selected[rnd_ind].toUpperCase());
                    this.vect_cell_letters[i].letter.x = this.vect_cell_letters[i].cell.x - this.vect_cell_letters[i].letter.width / 2 - resolution;
                    this.vect_cell_letters[i].letter.y = this.vect_cell_letters[i].cell.y - this.vect_cell_letters[i].letter.height / 2 - 4 * resolution;
                    this.vect_cell_letters[i].letter.visible = true;
                    this.vect_cell_letters[i].cell.visible = true
                } else {
                    this.vect_cell_letters[i].letter.visible = false;
                    this.vect_cell_letters[i].cell.visible = false
                }
                word_selected = word_selected.substring(0, rnd_ind) + word_selected.substring(rnd_ind + 1, word_selected.length);
                if (rnd_ind < this.info_selected.visible_letters.length)
                    this.info_selected.visible_letters = this.info_selected.visible_letters.substring(0, rnd_ind) + this.info_selected.visible_letters.substring(rnd_ind + 1, this.info_selected.visible_letters.length)
            }
        } else {
            for (var i = 0; i < this.vect_cell_letters.length; i++) {
                this.vect_cell_letters[i].letter.visible = false;
                this.vect_cell_letters[i].cell.visible = false
            }
        }
        game.add.tween(play.groupCells).to({
            x: -game.width * 2
        }, 250, Phaser.Easing.Linear.None).start();
        game.add.tween(play.groupMenuWord).to({
            x: 0
        }, 250, Phaser.Easing.Linear.None, false, 150).start();
        if (play.numLevel == 1 && play.hand && play.hand.alive) {
            play.bg_tuto_noir.visible = false;
            play.bg_tuto.visible = false;
            play.tuto.visible = false;
            play.hand.kill();
            game.add.tween(play.witch_girl).to({
                x: play.witch_girl.x - 20 * resolution,
                y: 120 * resolution
            }, 250, Phaser.Easing.Quadratic.Out, false, 150).start();
            game.time.events.add(300, function() {
                play.bg_tuto_noir.loadTexture("bg_tuto2");
                play.bg_tuto_noir.visible = true;
                play.bg_tuto.visible = true;
                play.bg_tuto.x -= 20 * resolution;
                play.bg_tuto.y = 70 * resolution;
                play.tuto.setText(text.txttuto2);
                play.tuto.x = play.bg_tuto.x + play.bg_tuto.width / 2 - play.tuto.width / 2 - 5 * resolution;
                play.tuto.y = play.bg_tuto.y + play.bg_tuto.height / 2 - play.tuto.height / 2 - 3 * resolution;
                play.tuto.visible = true
            }, this)
        } else {
            game.add.tween(play.witch_girl).to({
                x: 45 * resolution,
                y: 100 * resolution
            }, 250, Phaser.Easing.Quadratic.Out, false, 150).start()
        }
    },
    CloseMenuWord: function() {
        if (play.gameOver || play.pausePlay || play.istimerEndLevel || play.istimerEndLevelAndLose || play.tuto)
            return;
        if (Music.enableMisic)
            Music.sounds.play("whoosh");
        if (play.snd_remove > 0)
            play.snd_remove = 0;
        game.add.tween(play.groupCells).to({
            x: 0
        }, 250, Phaser.Easing.Linear.None, false, 150).start();
        game.add.tween(play.groupMenuWord).to({
            x: game.width * 1.5
        }, 250, Phaser.Easing.Linear.None).start();
        game.add.tween(play.witch_girl).to({
            x: 270 * resolution,
            y: 422 * resolution
        }, 250, Phaser.Easing.Quadratic.Out).start();
        for (var i = 0; i < play.vect_cell_letters.length; i++) {
            play.vect_cell_letters[i].letter.visible = false
        }
        for (i = 0; i < this.vect_cell_response.length; i++) {
            if (this.vect_cell_response[i].cell)
                this.vect_cell_response[i].cell.destroy();
            if (this.vect_cell_response[i].letter)
                this.vect_cell_response[i].letter.destroy()
        }
        this.vect_cell_response = [];
        this.nbr_letters_response = 0;
        this.info_selected.word = "";
        this.info_selected.category = "";
        this.info_selected.question = "";
        this.info_selected.choices = "";
        this.info_selected.visible_letters = ""
    },
    CorrectionWord: function() {
        var nbr_errors = 0;
        for (var i = 0; i < this.vect_cell_response.length; i++) {
            if (this.vect_cell_response[i].letter.text != this.info_selected.word[i].toUpperCase()) {
                nbr_errors++;
                break
            }
        }
        if (nbr_errors == 0) {
            if (Music.enableMisic)
                Music.sounds.play("correct");
            for (var ii = 0; ii < this.vect_cell_response.length; ii++) {
                game.time.events.add(ii * 50, function() {
                    var emitter = game.add.emitter(this.cell.x, this.cell.y, 25);
                    emitter.makeParticles("etoile_particule");
                    emitter.setAlpha(1, 0, 800, Phaser.Easing.Linear.None);
                    emitter.setScale(1, .75, 800, Phaser.Easing.Linear.None);
                    emitter.minParticleSpeed.setTo(-100, -50);
                    emitter.maxParticleSpeed.setTo(100, 100);
                    emitter.start(true, 800, 25, 25);
                    play.groupMenuWord.add(emitter);
                    play.groupMenuWord.bringToTop(this.cell);
                    play.groupMenuWord.bringToTop(this.letter);
                    this.cell.frame = 1;
                    game.add.tween(this.cell.scale).to({
                        x: this.cell.scale.x + .2,
                        y: this.cell.scale.y + .2
                    }, 200, Phaser.Easing.Quadratic.Out).to({
                        x: this.cell.scale.x,
                        y: this.cell.scale.y
                    }, 200, Phaser.Easing.Quadratic.Out).start();
                    game.add.tween(this.letter.scale).to({
                        x: this.letter.scale.x + .2,
                        y: this.letter.scale.y + .2
                    }, 200, Phaser.Easing.Quadratic.Out).to({
                        x: this.letter.scale.x,
                        y: this.letter.scale.y
                    }, 200, Phaser.Easing.Quadratic.Out).start()
                }, this.vect_cell_response[ii])
            }
            this.Refresh_grid(play.cell_selected);
            game.time.events.add(500 + 50 * this.vect_cell_response.length, this.CloseMenuWord, this);
            sauvegarde[play.numLevel - 1].nbr_found++;
            if (sauvegarde[play.numLevel - 1].nbr_found >= sauvegarde[play.numLevel - 1].nbr_words - 2 && this.star1.key == "star_off") {
                this.star1.loadTexture("star_on");
                this.number_etoiles++;
                play.show_unlock()
            }
            if (sauvegarde[play.numLevel - 1].nbr_found >= sauvegarde[play.numLevel - 1].nbr_words - 1 && this.star2.key == "star_off") {
                this.star2.loadTexture("star_on");
                this.number_etoiles++
            }
            if (sauvegarde[play.numLevel - 1].nbr_found >= sauvegarde[play.numLevel - 1].nbr_words && this.star3.key == "star_off") {
                this.star3.loadTexture("star_on");
                this.number_etoiles++;
                this.istimerEndLevel = true;
                this.timerEndLevel = 500 + 50 * this.vect_cell_response.length
            }
            sauvegarde[play.numLevel - 1].numetoile = this.number_etoiles;
            save_ecrit();
            play.Witch_Happy_Animation()
        } else {
            if (Music.enableMisic)
                Music.sounds.play("incorrect");
            for (var ii = 0; ii < this.vect_cell_response.length; ii++) {
                if (this.vect_cell_response[ii].cell.frame != 1) {
                    game.time.events.add(50, function() {
                        play.groupMenuWord.bringToTop(this.cell);
                        play.groupMenuWord.bringToTop(this.letter);
                        this.cell.frame = 2;
                        game.add.tween(this.cell.scale).to({
                            x: this.cell.scale.x + .2,
                            y: this.cell.scale.y + .2
                        }, 200, Phaser.Easing.Quadratic.Out).to({
                            x: this.cell.scale.x,
                            y: this.cell.scale.y
                        }, 200, Phaser.Easing.Quadratic.Out).start();
                        game.add.tween(this.letter.scale).to({
                            x: this.letter.scale.x + .2,
                            y: this.letter.scale.y + .2
                        }, 200, Phaser.Easing.Quadratic.Out).to({
                            x: this.letter.scale.x,
                            y: this.letter.scale.y
                        }, 200, Phaser.Easing.Quadratic.Out).start();
                        game.time.events.add(400, function() {
                            this.cell.frame = 0
                        }, this)
                    }, this.vect_cell_response[ii])
                }
            }
            play.Witch_Sad_Animation()
        }
    },
    Refresh_grid: function(cell) {
        var first_ind = 0;
        var last_ind = 0;
        if (cell.direction_vertical == 0) {
            if (cell.ind_j >= 0) {
                for (var j = cell.ind_j; j >= 0; j--) {
                    if (this.mat_sprites[cell.ind_i][j].bg_cell) {
                        if (!this.mat_sprites[cell.ind_i][j].txt_letter.visible) {
                            this.mat_sprites[cell.ind_i][j].txt_letter.visible = true;
                            this.mat_player[cell.ind_i][j] = this.mat_sprites[cell.ind_i][j].txt_letter.text;
                            save_word(this.mat_player[cell.ind_i][j], play.numLevel - 1, cell.ind_i, j);
                            this.nbr_letters_found++
                        }
                    } else {
                        first_ind = j + 1;
                        break
                    }
                }
            }
            if (cell.ind_j + 1 < play.rows) {
                for (var jj = cell.ind_j + 1; jj < play.rows; jj++) {
                    if (this.mat_sprites[cell.ind_i][jj].bg_cell) {
                        if (!this.mat_sprites[cell.ind_i][jj].txt_letter.visible) {
                            this.mat_sprites[cell.ind_i][jj].txt_letter.visible = true;
                            this.mat_player[cell.ind_i][jj] = this.mat_sprites[cell.ind_i][jj].txt_letter.text;
                            save_word(this.mat_player[cell.ind_i][jj], play.numLevel - 1, cell.ind_i, jj);
                            this.nbr_letters_found++
                        }
                    } else {
                        last_ind = jj - 1;
                        break
                    }
                }
            }
        } else {
            if (cell.ind_i >= 0) {
                for (var i = cell.ind_i; i >= 0; i--) {
                    if (this.mat_sprites[i][cell.ind_j].bg_cell) {
                        if (!this.mat_sprites[i][cell.ind_j].txt_letter.visible) {
                            this.mat_sprites[i][cell.ind_j].txt_letter.visible = true;
                            this.mat_player[i][cell.ind_j] = this.mat_sprites[i][cell.ind_j].txt_letter.text;
                            save_word(this.mat_player[i][cell.ind_j], play.numLevel - 1, i, cell.ind_j);
                            this.nbr_letters_found++
                        }
                    } else {
                        first_ind = i + 1;
                        break
                    }
                }
            }
            if (cell.ind_i + 1 < play.cols) {
                for (var ii = cell.ind_i + 1; ii < play.cols; ii++) {
                    if (this.mat_sprites[ii][cell.ind_j].bg_cell) {
                        if (!this.mat_sprites[ii][cell.ind_j].txt_letter.visible) {
                            this.mat_sprites[ii][cell.ind_j].txt_letter.visible = true;
                            this.mat_player[ii][cell.ind_j] = this.mat_sprites[ii][cell.ind_j].txt_letter.text;
                            save_word(this.mat_player[ii][cell.ind_j], play.numLevel - 1, ii, cell.ind_j);
                            this.nbr_letters_found++
                        }
                    } else {
                        last_ind = ii - 1;
                        break
                    }
                }
            }
        }
    },
    ShowLetter: function() {
        if (play.gameOver || play.pausePlay || play.istimerEndLevel || play.istimerEndLevelAndLose || play.tuto)
            return;
        if (play.nbr_hints <= 0)
            return;
        var nbr_cell_visible = 0;
        for (var i = 0; i < this.vect_cell_response.length; i++) {
            if (this.vect_cell_response[i].letter.visible)
                nbr_cell_visible++
        }
        if (nbr_cell_visible >= this.vect_cell_response.length)
            return;
        var rnd_ind = Math.floor(Math.random() * (this.vect_cell_response.length - .1));
        while (this.vect_cell_response[rnd_ind].letter.visible) {
            rnd_ind = Math.floor(Math.random() * (this.vect_cell_response.length - .1))
        }
        for (var x = 0; x < this.vect_cell_letters.length; x++) {
            if (this.vect_cell_letters[x].letter.visible && this.vect_cell_letters[x].letter.text == this.info_selected.word[rnd_ind]) {
                play.vect_cell_response[rnd_ind].letter.setText(this.vect_cell_letters[x].letter.text);
                play.vect_cell_response[rnd_ind].letter.x = play.vect_cell_response[rnd_ind].cell.x - play.vect_cell_response[rnd_ind].letter.width / 2 - .5 * resolution;
                play.vect_cell_response[rnd_ind].letter.y = play.vect_cell_response[rnd_ind].cell.y - play.vect_cell_response[rnd_ind].letter.height / 2 - 3.5 * resolution;
                play.vect_cell_response[rnd_ind].cell.frame = 1;
                play.vect_cell_response[rnd_ind].cell.ind_question = this.vect_cell_letters[x].cell.ind;
                play.vect_cell_response[rnd_ind].letter.visible = true;
                this.vect_cell_letters[x].letter.visible = false;
                this.vect_cell_letters[x].cell.visible = false;
                play.nbr_letters_response++;
                if (Music.enableMisic)
                    Music.sounds.play("powerup");
                var emitter = game.add.emitter(play.vect_cell_response[rnd_ind].cell.x, play.vect_cell_response[rnd_ind].cell.y - play.vect_cell_response[rnd_ind].cell.height / 4, 25);
                emitter.makeParticles("etoile_particule");
                emitter.setAlpha(1, 0, 1500, Phaser.Easing.Linear.None);
                emitter.setScale(1, .5, 1500, Phaser.Easing.Linear.None);
                emitter.minParticleSpeed.setTo(-100, -25);
                emitter.maxParticleSpeed.setTo(100, 100);
                emitter.start(true, 1500, 25, 25);
                break
            }
        }
        if (play.cell_selected.direction_vertical == 0) {
            if (play.mat_sprites[play.cell_selected.ind_i][play.cell_selected.first_j + rnd_ind].bg_cell) {
                if (!play.mat_sprites[play.cell_selected.ind_i][play.cell_selected.first_j + rnd_ind].txt_letter.visible) {
                    play.mat_sprites[play.cell_selected.ind_i][play.cell_selected.first_j + rnd_ind].txt_letter.visible = true;
                    play.mat_player[play.cell_selected.ind_i][play.cell_selected.first_j + rnd_ind] = play.mat_sprites[play.cell_selected.ind_i][play.cell_selected.first_j + rnd_ind].txt_letter.text;
                    save_word(play.mat_player[play.cell_selected.ind_i][play.cell_selected.first_j + rnd_ind], play.numLevel - 1, play.cell_selected.ind_i, play.cell_selected.first_j + rnd_ind);
                    play.nbr_letters_found++
                }
            }
        } else if (play.cell_selected.direction_vertical == 1) {
            if (play.mat_sprites[play.cell_selected.first_i + rnd_ind][play.cell_selected.ind_j].bg_cell) {
                if (!play.mat_sprites[play.cell_selected.first_i + rnd_ind][play.cell_selected.ind_j].txt_letter.visible) {
                    play.mat_sprites[play.cell_selected.first_i + rnd_ind][play.cell_selected.ind_j].txt_letter.visible = true;
                    play.mat_player[play.cell_selected.first_i + rnd_ind][play.cell_selected.ind_j] = play.mat_sprites[play.cell_selected.first_i + rnd_ind][play.cell_selected.ind_j].txt_letter.text;
                    save_word(play.mat_player[play.cell_selected.first_i + rnd_ind][play.cell_selected.ind_j], play.numLevel - 1, play.cell_selected.first_i + rnd_ind, play.cell_selected.ind_j);
                    play.nbr_letters_found++
                }
            }
        }
        play.nbr_hints--;
        Save_setItem("WitchCrossward_hints", play.nbr_hints);
        play.txt_nbr_hints.setText(text.txtHint + this.nbr_hints);
        play.txt_nbr_hints.x = 263 * resolution - play.txt_nbr_hints.width / 2;
        if (play.nbr_letters_response >= play.vect_cell_response.length)
            play.CorrectionWord()
    },
    DeleteLetter: function() {
        if (play.gameOver || play.pausePlay || play.istimerEndLevel || play.istimerEndLevelAndLose || play.tuto)
            return;
        if (play.nbr_hints <= 0)
            return;
        var nbr_cell_visible = 0;
        var nbr_cell_invisible = 0;
        for (var i = 0; i < this.vect_cell_response.length; i++) {
            if (this.vect_cell_response[i].letter.visible)
                nbr_cell_visible++;
            else
                nbr_cell_invisible++
        }
        if (nbr_cell_visible >= this.vect_cell_response.length)
            return;
        var nbr_letter_visible = 0;
        for (var j = 0; j < this.vect_cell_letters.length; j++) {
            if (this.vect_cell_letters[j].letter.visible)
                nbr_letter_visible++
        }
        if (nbr_cell_invisible >= nbr_letter_visible)
            return;
        var rnd_ind = Math.floor(Math.random() * (this.vect_cell_letters.length - .1));
        var random_again = true;
        var compteur_while = 0;
        while (random_again || !this.vect_cell_letters[rnd_ind].cell.visible) {
            rnd_ind = Math.floor(Math.random() * (this.vect_cell_letters.length - .1));
            for (var x = 0; x < this.info_selected.word.length; x++) {
                random_again = false;
                if (this.vect_cell_letters[rnd_ind].letter.visible && this.vect_cell_letters[rnd_ind].letter.text == this.info_selected.word[x]) {
                    random_again = true;
                    break
                }
            }
            compteur_while++;
            if (compteur_while >= 3e3) {
                this.creer_text_score({
                    x: game.width / 2,
                    y: game.height / 2,
                    txt_created: false
                }, text.txtNoDelete, 15 * resolution);
                return
            }
        }
        if (this.vect_cell_letters[rnd_ind].cell.visible) {
            play.vect_cell_letters[rnd_ind].cell.visible = false;
            play.vect_cell_letters[rnd_ind].letter.visible = false;
            if (Music.enableMisic)
                Music.sounds.play("powerup");
            var emitter = game.add.emitter(play.vect_cell_letters[rnd_ind].cell.x, play.vect_cell_letters[rnd_ind].cell.y - play.vect_cell_letters[rnd_ind].cell.height / 4, 25);
            emitter.makeParticles("etoile_particule");
            emitter.setAlpha(1, 0, 1500, Phaser.Easing.Linear.None);
            emitter.setScale(1, .5, 1500, Phaser.Easing.Linear.None);
            emitter.minParticleSpeed.setTo(-100, -25);
            emitter.maxParticleSpeed.setTo(100, 100);
            emitter.start(true, 1500, 25, 25);
            for (var s = 0; s < words[play.info_selected.ind].choices.length; s++) {
                if (words[play.info_selected.ind].choices[s].toUpperCase() == play.vect_cell_letters[rnd_ind].letter.text) {
                    words[play.info_selected.ind].choices = words[play.info_selected.ind].choices.substring(0, s) + words[play.info_selected.ind].choices.substring(s + 1, words[play.info_selected.ind].choices.length);
                    break
                }
            }
        }
        play.nbr_hints--;
        Save_setItem("WitchCrossward_hints", play.nbr_hints);
        play.txt_nbr_hints.setText(text.txtHint + this.nbr_hints);
        play.txt_nbr_hints.x = 263 * resolution - play.txt_nbr_hints.width / 2
    },
    Time_Update: function() {
        if (play.tuto)
            return;
        if (sauvegarde[play.numLevel - 1].nbr_found >= sauvegarde[play.numLevel - 1].nbr_words)
            return;
        if (!this.objectives_finished) {
            if (this.bonus_timer >= 0) {
                this.bonus_timer -= this.game.time.elapsed
            } else if (this.bonus_time > 0) {
                if (this.bonus_time > 1) {
                    if (this.bonus_time % 60 == 0) {
                        this.minutes--;
                        this.secondss = 59;
                        this.txt_time.setText(this.minutes + ":" + this.secondss)
                    } else {
                        this.secondss--;
                        if (this.secondss < 10) {
                            this.txt_time.setText(this.minutes + ":0" + this.secondss)
                        } else {
                            this.txt_time.setText(this.minutes + ":" + this.secondss)
                        }
                    }
                    this.bonus_time--;
                    this.bonus_timer = 1e3
                } else {
                    this.bonus_time--;
                    this.txt_time.setText("0:00")
                }
            }
        }
    },
    Witch_Happy_Animation: function() {
        if (Music.enableMisic)
            Music.sounds.play("witch_laugh");
        this.witch_girl.animations.play("happy", 40, false, false)
    },
    Witch_Sad_Animation: function() {
        if (play.witch_girl.x != 45 * resolution)
            return;
        if (Music.enableMisic)
            Music.sounds.play("witch_sad");
        this.witch_girl.animations.play("sad", 33, false, false);
        game.add.tween(play.witch_girl).to({
            x: -game.width * 2
        }, 800, Phaser.Easing.Back.In, false, 1e3).start().onComplete.add(function() {
            play.witch_girl.x = game.width * 2;
            game.add.tween(play.witch_girl).to({
                x: 45 * resolution
            }, 500, Phaser.Easing.Quadratic.Out, false, 500).start()
        }, this)
    },
    init_tuto: function() {
        if (play.numLevel == 1 && play.mat_player[6][8] == "*") {
            this.bg_tuto_noir = game.add.sprite(0, 0, "bg_tuto1");
            this.bg_tuto_noir.visible = false;
            this.bg_tuto = game.add.sprite(55 * resolution, 370 * resolution, "sprites2");
            this.bg_tuto.frameName = "bgTuto" + resolution + ".png";
            this.bg_tuto.visible = false;
            this.tuto = game.add.text(this.bg_tuto.x + 7 * resolution, this.bg_tuto.y + 35 * resolution, text.txttuto1, {
                font: 15 * resolution + langFont,
                align: "center",
                fill: "#a46859",
                stroke: "#000000",
                strokeThickness: 0 * resolution
            });
            this.tuto.visible = false;
            this.tuto.x = this.bg_tuto.x + this.bg_tuto.width / 2 - this.tuto.width / 2 - 5 * resolution;
            this.tuto.y = this.bg_tuto.y + this.bg_tuto.height / 2 - this.tuto.height / 2 - 3 * resolution;
            this.tuto.align = "center";
            this.hand = game.add.sprite(30 * resolution, 215 * resolution, "sprites2", "hand" + resolution + ".png");
            this.hand.frameName = "hand" + resolution + ".png";
            this.hand.visible = false;
            game.time.events.add(400, function() {
                this.bg_tuto_noir.visible = true;
                this.bg_tuto.visible = true;
                this.tuto.visible = true;
                this.hand.visible = true;
                game.add.tween(this.hand).to({
                    y: 320 * resolution
                }, 700, Phaser.Easing.Quadratic.None).to({
                    y: 215 * resolution
                }, 700, Phaser.Easing.Quadratic.None).loop().start();
                this.witch_girl.bringToTop()
            }, this)
        }
    },
    show_unlock: function() {
        game.time.events.add(1500, function() {
            this.bg_noire.visible = true;
            this.pausePlay = true;
            if (play.bonus_time > 0)
                play.nbr_hints++;
            if (play.bonus_time > 30)
                play.nbr_hints++;
            if (play.bonus_time > 60)
                play.nbr_hints++;
            Save_setItem("WitchCrossward_hints", play.nbr_hints);
            if (this.numLevel > level && this.numLevel < nombre_levels) {
                level = this.numLevel;
                Save_setItem("WitchCrossward_level", level);
                new_level = true
            }
            play.Fin_level(false);
            this.group_unlock = game.add.group();
            this.bg_unlock = game.add.sprite(game.width / 2, game.height / 2, "sprites2", "bg_question" + resolution + ".png");
            this.bg_unlock.anchor.setTo(.5, .5);
            this.bg_unlock.alive = true;
            this.txt_unlock = game.add.text(0, 0, text.txtunlock, {
                font: 18 * resolution + langFont,
                align: "center",
                fill: "#a46859",
                stroke: "#000000",
                strokeThickness: 0 * resolution
            });
            this.txt_unlock.x = this.bg_unlock.x - this.txt_unlock.width / 2;
            this.txt_unlock.y = this.bg_unlock.y - this.txt_unlock.height / 2 - 5 * resolution;
            this.txt_unlock.alive = true;
            this.bnt_next = new Bouton(this.game,this.bg_unlock.x - 60 * resolution,this.bg_unlock.y + this.bg_unlock.height / 2 + 20 * resolution,"sprites2",function() {
                play.InitialiseFade("levels")
            }
            ,this);
            this.bnt_next.frameName = "bnt_next" + resolution + ".png";
            this.bnt_next.alive = true;
            this.bnt_continue = new Bouton(this.game,this.bg_unlock.x + 60 * resolution,this.bg_unlock.y + this.bg_unlock.height / 2 + 20 * resolution,"sprites2",function() {
                game.add.tween(this.group_unlock).to({
                    y: -50 * resolution
                }, 350, Phaser.Easing.Quadratic.Out, false, 100).to({
                    y: 400 * resolution
                }, 300, Phaser.Easing.Quadratic.Out, true).start().onComplete.add(function() {
                    this.bg_noire.visible = false;
                    this.pausePlay = false;
                    game.add.tween(play.witch_girl).to({
                        x: 270 * resolution,
                        y: 422 * resolution
                    }, 250, Phaser.Easing.Quadratic.Out).start()
                }, this)
            }
            ,this);
            this.bnt_continue.frameName = "bnt_continue" + resolution + ".png";
            this.bnt_continue.alive = true;
            this.group_unlock.add(this.bg_unlock);
            this.group_unlock.add(this.txt_unlock);
            this.group_unlock.add(this.bnt_next);
            this.group_unlock.add(this.bnt_continue);
            this.group_unlock.y = 400 * resolution;
            game.add.tween(this.group_unlock).to({
                y: -50 * resolution
            }, 350, Phaser.Easing.Quadratic.Out, true, 100).to({
                y: -35 * resolution
            }, 200, Phaser.Easing.Quadratic.Out, true, 70).start();
            game.add.tween(play.witch_girl).to({
                x: 45 * resolution,
                y: 100 * resolution
            }, 250, Phaser.Easing.Quadratic.Out, false, 70).start();
            game.world.bringToTop(this.bg_noire);
            game.world.bringToTop(this.group_unlock);
            game.world.bringToTop(this.witch_girl)
        }, this)
    },
    GenerateLevels: function(i) {
        str_mat = Save_getItem("WitchCrossward_mat", null);
        str_mat_player = Save_getItem("WitchCrossward_mat_player", null);
        if (str_mat == null)
            str_mat = "";
        if (str_mat_player == null)
            str_mat_player = "";
        this.rows = 20;
        this.cols = 20;
        var str_words = Save_getItem("WitchCrossward_words", "");
        load_words(str_words);
        this.all_words = all_words;
        this.generation_process(i);
        save_words(this.all_words)
    },
    generation_process: function(i) {
        this.best_mat = {
            mat: [],
            score: -1
        };
        this.score_mat = 0;
        this.choose_words(i);
        if (i > 0) {
            var nbr_iter = 0;
            while (nbr_iter < 200) {
                this.algo_generation();
                nbr_iter++
            }
        } else {
            this.mat_grid = [];
            for (var ii = 0; ii < this.rows; ii++) {
                this.mat_grid[ii] = [];
                for (var jj = 0; jj < this.cols; jj++) {
                    this.mat_grid[ii][jj] = ""
                }
            }
            this.mat_grid[4][10] = "N";
            this.mat_grid[4][11] = "o";
            this.mat_grid[4][12] = "r";
            this.mat_grid[4][13] = "m";
            this.mat_grid[4][14] = "a";
            this.mat_grid[4][15] = "l";
            this.mat_grid[6][8] = "L";
            this.mat_grid[7][8] = "i";
            this.mat_grid[8][8] = "o";
            this.mat_grid[9][8] = "n";
            this.mat_grid[7][7] = "D";
            this.mat_grid[7][8] = "i";
            this.mat_grid[7][9] = "n";
            this.mat_grid[7][10] = "n";
            this.mat_grid[7][11] = "e";
            this.mat_grid[7][12] = "r";
            this.mat_grid[3][11] = "C";
            this.mat_grid[4][11] = "o";
            this.mat_grid[5][11] = "f";
            this.mat_grid[6][11] = "f";
            this.mat_grid[7][11] = "e";
            this.mat_grid[8][11] = "e";
            this.best_mat.mat = this.mat_grid;
            this.best_mat.score = 4
        }
        sauvegarde[i].nbr_words = this.best_mat.score;
        save_matrice(this.best_mat.mat);
        save_ecrit()
    },
    choose_words: function(num_level) {
        this.vect_words = [];
        if (num_level == 0)
            var nbr_words = 4;
        else if (num_level <= 5)
            var nbr_words = 5;
        else if (num_level <= 10)
            var nbr_words = 10;
        else if (num_level < 20)
            var nbr_words = 10;
        else if (num_level <= nombre_levels)
            var nbr_words = 15;
        var v = 0;
        while (v < nbr_words) {
            if (num_level == 0) {
                var id_word = v
            } else {
                var id_word = Math.round(Math.random() * (this.all_words.length - 1))
            }
            if (this.all_words[id_word].category != "*") {
                this.vect_words.push({
                    word: this.all_words[id_word].response,
                    question: this.all_words[id_word].question,
                    category: this.all_words[id_word].category,
                    choices: this.all_words[id_word].choices,
                    position: "-1",
                    isVertical: "-1"
                });
                this.all_words[id_word].category = "*";
                this.all_words[id_word].response = "*";
                this.all_words[id_word].question = "*";
                this.all_words[id_word].choices = "*";
                v++
            }
        }
    },
    algo_generation: function() {
        this.sort_longest_word(this.vect_words);
        this.score_mat = 0;
        this.mat_grid = [];
        for (var i = 0; i < this.rows; i++) {
            this.mat_grid[i] = [];
            for (var j = 0; j < this.cols; j++) {
                this.mat_grid[i][j] = ""
            }
        }
        this.put_first_word();
        for (var it = 0; it < 100; it++) {
            this.put_left_words()
        }
        if (this.best_mat.score < this.score_mat) {
            this.best_mat.mat = this.mat_grid;
            this.best_mat.score = this.score_mat
        }
    },
    sort_longest_word: function(vect) {
        var vect_sort = [];
        for (var w = 0; w < vect.length; w++) {
            var longest_word = this.vect_words[w].word;
            var longest_word_index = w;
            for (var i = 0; i < vect.length; i++) {
                if (longest_word.length < vect[i].word.length) {
                    longest_word = vect[i].word;
                    longest_word_index = i
                }
            }
            vect_sort.push({
                word: longest_word,
                question: this.vect_words[longest_word_index].question,
                category: this.vect_words[longest_word_index].category,
                choices: this.vect_words[longest_word_index].choices,
                position: "-1",
                isVertical: "-1"
            });
            vect[longest_word_index].word = ""
        }
        this.vect_words = vect_sort
    },
    insert_word_grid: function(word_obj) {
        if (this.score_mat != 0) {
            var nbr_lettre_commun = 0;
            if (word_obj.isVertical == 0) {
                nbr_lettre_commun = 0;
                for (var j = word_obj.position.j; j < word_obj.position.j + word_obj.word.length; j++) {
                    if (this.mat_grid[word_obj.position.i][j] != "") {
                        nbr_lettre_commun++;
                        if (nbr_lettre_commun > 1) {
                            j = word_obj.position.j + word_obj.word.length + 1;
                            word_obj.position = "-1";
                            word_obj.isVertical = "-1"
                        }
                    }
                }
            } else if (word_obj.isVertical == 1) {
                nbr_lettre_commun = 0;
                for (var i = word_obj.position.i; i < word_obj.position.i + word_obj.word.length; i++) {
                    if (this.mat_grid[i][word_obj.position.j] != "") {
                        nbr_lettre_commun++;
                        if (nbr_lettre_commun > 1) {
                            i = word_obj.position.i + word_obj.word.length + 1;
                            word_obj.position = "-1";
                            word_obj.isVertical = "-1"
                        }
                    }
                }
            }
        }
        if (word_obj.position != "-1") {
            for (var l = 0; l < word_obj.word.length; l++) {
                this.mat_grid[word_obj.position.i][word_obj.position.j] = word_obj.word[l];
                if (word_obj.isVertical == 0)
                    word_obj.position.j++;
                else
                    word_obj.position.i++
            }
            this.score_mat++
        }
    },
    put_first_word: function() {
        while (this.vect_words[0].position == "-1") {
            var pos_debut = {
                i: Math.round(Math.random() * (this.cols - 1)),
                j: Math.round(Math.random() * (this.rows - 1))
            };
            var isvert = Math.round(Math.random());
            if (isvert == 0) {
                if (pos_debut.j + this.vect_words[0].word.length < this.cols) {
                    this.vect_words[0].position = {
                        i: pos_debut.i,
                        j: pos_debut.j
                    };
                    this.vect_words[0].isVertical = isvert;
                    this.insert_word_grid(this.vect_words[0])
                }
            } else if (isvert == 1) {
                if (pos_debut.i + this.vect_words[0].word.length < this.rows) {
                    this.vect_words[0].position = {
                        i: pos_debut.i,
                        j: pos_debut.j
                    };
                    this.vect_words[0].isVertical = isvert;
                    this.insert_word_grid(this.vect_words[0])
                }
            }
        }
    },
    put_left_words: function() {
        for (var w = 0; w < this.vect_words.length; w++) {
            if (this.vect_words[w].position == "-1") {
                for (var i = 0; i < this.cols; i++) {
                    for (var j = 0; j < this.rows; j++) {
                        if (this.mat_grid[i][j] != "") {
                            for (var l = 0; l < this.vect_words[w].word.length; l++) {
                                if (this.vect_words[w].word[l] == this.mat_grid[i][j]) {
                                    var nbr_lettre_commun_avant = 0;
                                    var nbr_lettre_commun_apres = 0;
                                    if (j - l + 1 > 0 && j - l + this.vect_words[w].word.length - 1 < this.rows && (j - l - 1 >= 0 && this.mat_grid[i][j - l - 1] == "" && j - l + this.vect_words[w].word.length < this.rows && this.mat_grid[i][j - l + this.vect_words[w].word.length] == "" || j - l - 1 < 0 && j - l + this.vect_words[w].word.length < this.rows && this.mat_grid[i][j - l + this.vect_words[w].word.length] == "")) {
                                        nbr_lettre_commun_avant = 0;
                                        nbr_lettre_commun_apres = 0;
                                        for (var m = j - l; m < j - l + this.vect_words[w].word.length; m++) {
                                            if (m >= 0 && m < this.rows && i - 1 >= 0) {
                                                if (this.mat_grid[i - 1][m] != "") {
                                                    nbr_lettre_commun_avant++
                                                }
                                            }
                                            if (m >= 0 && m < this.rows && i + 1 < this.rows) {
                                                if (this.mat_grid[i + 1][m] != "") {
                                                    nbr_lettre_commun_apres++
                                                }
                                            }
                                        }
                                        if (nbr_lettre_commun_avant <= 1 && nbr_lettre_commun_apres <= 1) {
                                            this.vect_words[w].position = {
                                                i: i,
                                                j: j - l
                                            };
                                            this.vect_words[w].isVertical = 0;
                                            l = this.vect_words[w].word.length + 1;
                                            i = this.cols + 1;
                                            j = this.rows + 1
                                        }
                                    } else if (i - l + 1 > 0 && i - l + this.vect_words[w].word.length - 1 < this.cols && (i - l - 1 > 0 && this.mat_grid[i - l - 1][j] == "" && i - l + this.vect_words[w].word.length < this.cols && this.mat_grid[i - l + this.vect_words[w].word.length][j] == "" || i - l - 1 < 0 && i - l + this.vect_words[w].word.length < this.cols && this.mat_grid[i - l + this.vect_words[w].word.length][j] == "")) {
                                        nbr_lettre_commun_avant = 0;
                                        nbr_lettre_commun_apres = 0;
                                        for (var n = i - l; n < i - l + this.vect_words[w].word.length; n++) {
                                            if (n >= 0 && n < this.cols && j - 1 >= 0) {
                                                if (this.mat_grid[n][j - 1] != "") {
                                                    nbr_lettre_commun_avant++
                                                }
                                            }
                                            if (n >= 0 && n < this.cols && j + 1 < this.cols) {
                                                if (this.mat_grid[n][j + 1] != "") {
                                                    nbr_lettre_commun_apres++
                                                }
                                            }
                                        }
                                        if (nbr_lettre_commun_avant <= 1 && nbr_lettre_commun_apres <= 1) {
                                            this.vect_words[w].position = {
                                                i: i - l,
                                                j: j
                                            };
                                            this.vect_words[w].isVertical = 1;
                                            l = this.vect_words[w].word.length + 1;
                                            i = this.cols + 1;
                                            j = this.rows + 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (this.vect_words[w].position != "-1")
                    this.insert_word_grid(this.vect_words[w])
            }
        }
    }
};
window.onload = function() {
    setTimeout(function() {
        window.scrollTo(0, 1)
    }, 10);
    game = new Phaser.Game(320 * resolution,480 * resolution,Phaser.CANVAS);
    play = game.state.add("play", WitchCrossward.Play, false);
    game.state.add("credits", WitchCrossward.Credits, false);
    lv = game.state.add("levels", WitchCrossward.Map_Levels, false);
    game.state.add("menu", WitchCrossward.Menu, false);
    game.state.add("preload", WitchCrossward.Preload, false);
    game.state.add("boot", WitchCrossward.Boot, true)
}
;
